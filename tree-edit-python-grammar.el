;;; tree-edit-python-grammar.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Ethan Leba
;; Author: Ethan Leba <ethanleba5@gmail.com>
;; SPDX-License-Identifier: GPL-3.0-or-later
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.0"))
;; Homepage: https://github.com/ethan-leba/tree-edit
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;; This is an autogenerated file from 'tree-edit-generate-grammars.el' that contains the grammar
;; and other precalculations for the python language. Please do not manually modify this!
;;
;;; Code:
(require 'mode-local)
(require 'tree-edit)

(setq-mode-local
 python-mode

 tree-edit-grammar
 '
((module (type . "REPEAT")
	 (content (type . "CHOICE")
		  (members ((type . "SEQ")
			    (members ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . expression))
							 ((type . "SYMBOL")
							  (name . future_import_statement))
							 ((type . "SYMBOL")
							  (name . import_statement))
							 ((type . "SYMBOL")
							  (name . import_from_statement))
							 ((type . "SYMBOL")
							  (name . print_statement))
							 ((type . "SYMBOL")
							  (name . assert_statement))
							 ((type . "SYMBOL")
							  (name . comma_statement))
							 ((type . "SYMBOL")
							  (name . return_statement))
							 ((type . "SYMBOL")
							  (name . delete_statement))
							 ((type . "SYMBOL")
							  (name . raise_statement))
							 ((type . "SYMBOL")
							  (name . pass_statement))
							 ((type . "SYMBOL")
							  (name . break_statement))
							 ((type . "SYMBOL")
							  (name . continue_statement))
							 ((type . "SYMBOL")
							  (name . global_statement))
							 ((type . "SYMBOL")
							  (name . nonlocal_statement))
							 ((type . "SYMBOL")
							  (name . assignment))
							 ((type . "SYMBOL")
							  (name . augmented_assignment))
							 ((type . "SYMBOL")
							  (name . yield))
							 ((type . "SYMBOL")
							  (name . exec_statement))))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "STRING")
								   (value . ";"))
								  ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . expression))
									    ((type . "SYMBOL")
									     (name . future_import_statement))
									    ((type . "SYMBOL")
									     (name . import_statement))
									    ((type . "SYMBOL")
									     (name . import_from_statement))
									    ((type . "SYMBOL")
									     (name . print_statement))
									    ((type . "SYMBOL")
									     (name . assert_statement))
									    ((type . "SYMBOL")
									     (name . comma_statement))
									    ((type . "SYMBOL")
									     (name . return_statement))
									    ((type . "SYMBOL")
									     (name . delete_statement))
									    ((type . "SYMBOL")
									     (name . raise_statement))
									    ((type . "SYMBOL")
									     (name . pass_statement))
									    ((type . "SYMBOL")
									     (name . break_statement))
									    ((type . "SYMBOL")
									     (name . continue_statement))
									    ((type . "SYMBOL")
									     (name . global_statement))
									    ((type . "SYMBOL")
									     (name . nonlocal_statement))
									    ((type . "SYMBOL")
									     (name . assignment))
									    ((type . "SYMBOL")
									     (name . augmented_assignment))
									    ((type . "SYMBOL")
									     (name . yield))
									    ((type . "SYMBOL")
									     (name . exec_statement)))))))))
				     ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . ";"))
					       ((type . "BLANK"))))
				     ((type . "SYMBOL")
				      (name . _newline))))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . if_statement))
				     ((type . "SYMBOL")
				      (name . for_statement))
				     ((type . "SYMBOL")
				      (name . while_statement))
				     ((type . "SYMBOL")
				      (name . try_statement))
				     ((type . "SYMBOL")
				      (name . with_statement))
				     ((type . "SYMBOL")
				      (name . function_definition))
				     ((type . "SYMBOL")
				      (name . class_definition))
				     ((type . "SYMBOL")
				      (name . decorated_definition))
				     ((type . "SYMBOL")
				      (name . match_statement)))))))
 (_statement (type . "CHOICE")
	     (members ((type . "SEQ")
		       (members ((type . "SEQ")
				 (members ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . expression))
						    ((type . "SYMBOL")
						     (name . future_import_statement))
						    ((type . "SYMBOL")
						     (name . import_statement))
						    ((type . "SYMBOL")
						     (name . import_from_statement))
						    ((type . "SYMBOL")
						     (name . print_statement))
						    ((type . "SYMBOL")
						     (name . assert_statement))
						    ((type . "SYMBOL")
						     (name . comma_statement))
						    ((type . "SYMBOL")
						     (name . return_statement))
						    ((type . "SYMBOL")
						     (name . delete_statement))
						    ((type . "SYMBOL")
						     (name . raise_statement))
						    ((type . "SYMBOL")
						     (name . pass_statement))
						    ((type . "SYMBOL")
						     (name . break_statement))
						    ((type . "SYMBOL")
						     (name . continue_statement))
						    ((type . "SYMBOL")
						     (name . global_statement))
						    ((type . "SYMBOL")
						     (name . nonlocal_statement))
						    ((type . "SYMBOL")
						     (name . assignment))
						    ((type . "SYMBOL")
						     (name . augmented_assignment))
						    ((type . "SYMBOL")
						     (name . yield))
						    ((type . "SYMBOL")
						     (name . exec_statement))))
					  ((type . "REPEAT")
					   (content (type . "SEQ")
						    (members ((type . "STRING")
							      (value . ";"))
							     ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . expression))
								       ((type . "SYMBOL")
									(name . future_import_statement))
								       ((type . "SYMBOL")
									(name . import_statement))
								       ((type . "SYMBOL")
									(name . import_from_statement))
								       ((type . "SYMBOL")
									(name . print_statement))
								       ((type . "SYMBOL")
									(name . assert_statement))
								       ((type . "SYMBOL")
									(name . comma_statement))
								       ((type . "SYMBOL")
									(name . return_statement))
								       ((type . "SYMBOL")
									(name . delete_statement))
								       ((type . "SYMBOL")
									(name . raise_statement))
								       ((type . "SYMBOL")
									(name . pass_statement))
								       ((type . "SYMBOL")
									(name . break_statement))
								       ((type . "SYMBOL")
									(name . continue_statement))
								       ((type . "SYMBOL")
									(name . global_statement))
								       ((type . "SYMBOL")
									(name . nonlocal_statement))
								       ((type . "SYMBOL")
									(name . assignment))
								       ((type . "SYMBOL")
									(name . augmented_assignment))
								       ((type . "SYMBOL")
									(name . yield))
								       ((type . "SYMBOL")
									(name . exec_statement)))))))))
				((type . "CHOICE")
				 (members ((type . "STRING")
					   (value . ";"))
					  ((type . "BLANK"))))
				((type . "SYMBOL")
				 (name . _newline))))
		      ((type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . if_statement))
				((type . "SYMBOL")
				 (name . for_statement))
				((type . "SYMBOL")
				 (name . while_statement))
				((type . "SYMBOL")
				 (name . try_statement))
				((type . "SYMBOL")
				 (name . with_statement))
				((type . "SYMBOL")
				 (name . function_definition))
				((type . "SYMBOL")
				 (name . class_definition))
				((type . "SYMBOL")
				 (name . decorated_definition))
				((type . "SYMBOL")
				 (name . match_statement))))))
 (_simple_statements (type . "SEQ")
		     (members ((type . "SEQ")
			       (members ((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . expression))
						  ((type . "SYMBOL")
						   (name . future_import_statement))
						  ((type . "SYMBOL")
						   (name . import_statement))
						  ((type . "SYMBOL")
						   (name . import_from_statement))
						  ((type . "SYMBOL")
						   (name . print_statement))
						  ((type . "SYMBOL")
						   (name . assert_statement))
						  ((type . "SYMBOL")
						   (name . comma_statement))
						  ((type . "SYMBOL")
						   (name . return_statement))
						  ((type . "SYMBOL")
						   (name . delete_statement))
						  ((type . "SYMBOL")
						   (name . raise_statement))
						  ((type . "SYMBOL")
						   (name . pass_statement))
						  ((type . "SYMBOL")
						   (name . break_statement))
						  ((type . "SYMBOL")
						   (name . continue_statement))
						  ((type . "SYMBOL")
						   (name . global_statement))
						  ((type . "SYMBOL")
						   (name . nonlocal_statement))
						  ((type . "SYMBOL")
						   (name . assignment))
						  ((type . "SYMBOL")
						   (name . augmented_assignment))
						  ((type . "SYMBOL")
						   (name . yield))
						  ((type . "SYMBOL")
						   (name . exec_statement))))
					((type . "REPEAT")
					 (content (type . "SEQ")
						  (members ((type . "STRING")
							    (value . ";"))
							   ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . expression))
								     ((type . "SYMBOL")
								      (name . future_import_statement))
								     ((type . "SYMBOL")
								      (name . import_statement))
								     ((type . "SYMBOL")
								      (name . import_from_statement))
								     ((type . "SYMBOL")
								      (name . print_statement))
								     ((type . "SYMBOL")
								      (name . assert_statement))
								     ((type . "SYMBOL")
								      (name . comma_statement))
								     ((type . "SYMBOL")
								      (name . return_statement))
								     ((type . "SYMBOL")
								      (name . delete_statement))
								     ((type . "SYMBOL")
								      (name . raise_statement))
								     ((type . "SYMBOL")
								      (name . pass_statement))
								     ((type . "SYMBOL")
								      (name . break_statement))
								     ((type . "SYMBOL")
								      (name . continue_statement))
								     ((type . "SYMBOL")
								      (name . global_statement))
								     ((type . "SYMBOL")
								      (name . nonlocal_statement))
								     ((type . "SYMBOL")
								      (name . assignment))
								     ((type . "SYMBOL")
								      (name . augmented_assignment))
								     ((type . "SYMBOL")
								      (name . yield))
								     ((type . "SYMBOL")
								      (name . exec_statement)))))))))
			      ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . ";"))
					((type . "BLANK"))))
			      ((type . "SYMBOL")
			       (name . _newline))))
 (_simple_statement (type . "CHOICE")
		    (members ((type . "SYMBOL")
			      (name . expression))
			     ((type . "SYMBOL")
			      (name . future_import_statement))
			     ((type . "SYMBOL")
			      (name . import_statement))
			     ((type . "SYMBOL")
			      (name . import_from_statement))
			     ((type . "SYMBOL")
			      (name . print_statement))
			     ((type . "SYMBOL")
			      (name . assert_statement))
			     ((type . "SYMBOL")
			      (name . comma_statement))
			     ((type . "SYMBOL")
			      (name . return_statement))
			     ((type . "SYMBOL")
			      (name . delete_statement))
			     ((type . "SYMBOL")
			      (name . raise_statement))
			     ((type . "SYMBOL")
			      (name . pass_statement))
			     ((type . "SYMBOL")
			      (name . break_statement))
			     ((type . "SYMBOL")
			      (name . continue_statement))
			     ((type . "SYMBOL")
			      (name . global_statement))
			     ((type . "SYMBOL")
			      (name . nonlocal_statement))
			     ((type . "SYMBOL")
			      (name . assignment))
			     ((type . "SYMBOL")
			      (name . augmented_assignment))
			     ((type . "SYMBOL")
			      (name . yield))
			     ((type . "SYMBOL")
			      (name . exec_statement))))
 (import_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "import"))
			    ((type . "SEQ")
			     (members ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "name")
						 (content (type . "CHOICE")
							  (members ((type . "SEQ")
								    (members ((type . "SYMBOL")
									      (name . identifier))
									     ((type . "REPEAT")
									      (content (type . "SEQ")
										       (members ((type . "STRING")
												 (value . "."))
												((type . "SYMBOL")
												 (name . identifier)))))))
								   ((type . "SYMBOL")
								    (name . aliased_import)))))
						((type . "REPEAT")
						 (content (type . "SEQ")
							  (members ((type . "STRING")
								    (value . ","))
								   ((type . "FIELD")
								    (name . "name")
								    (content (type . "CHOICE")
									     (members ((type . "SEQ")
										       (members ((type . "SYMBOL")
												 (name . identifier))
												((type . "REPEAT")
												 (content (type . "SEQ")
													  (members ((type . "STRING")
														    (value . "."))
														   ((type . "SYMBOL")
														    (name . identifier)))))))
										      ((type . "SYMBOL")
										       (name . aliased_import))))))))))
				      ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . ","))
						((type . "BLANK"))))))))
 (import_prefix (type . "REPEAT1") (content (type . "STRING") (value . ".")))
 (relative_import (type . "SEQ")
		  (members ((type . "SYMBOL")
			    (name . import_prefix))
			   ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "SYMBOL")
						(name . identifier))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "STRING")
								   (value . "."))
								  ((type . "SYMBOL")
								   (name . identifier)))))))
				     ((type . "BLANK"))))))
 (future_import_statement (type . "SEQ")
			  (members ((type . "STRING")
				    (value . "from"))
				   ((type . "STRING")
				    (value . "__future__"))
				   ((type . "STRING")
				    (value . "import"))
				   ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "SEQ")
							(members ((type . "FIELD")
								  (name . "name")
								  (content (type . "CHOICE")
									   (members ((type . "SEQ")
										     (members ((type . "SYMBOL")
											       (name . identifier))
											      ((type . "REPEAT")
											       (content (type . "SEQ")
													(members ((type . "STRING")
														  (value . "."))
														 ((type . "SYMBOL")
														  (name . identifier)))))))
										    ((type . "SYMBOL")
										     (name . aliased_import)))))
								 ((type . "REPEAT")
								  (content (type . "SEQ")
									   (members ((type . "STRING")
										     (value . ","))
										    ((type . "FIELD")
										     (name . "name")
										     (content (type . "CHOICE")
											      (members ((type . "SEQ")
													(members ((type . "SYMBOL")
														  (name . identifier))
														 ((type . "REPEAT")
														  (content (type . "SEQ")
															   (members ((type . "STRING")
																     (value . "."))
																    ((type . "SYMBOL")
																     (name . identifier)))))))
												       ((type . "SYMBOL")
													(name . aliased_import))))))))))
						       ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . ","))
								 ((type . "BLANK"))))))
					     ((type . "SEQ")
					      (members ((type . "STRING")
							(value . "("))
						       ((type . "SEQ")
							(members ((type . "SEQ")
								  (members ((type . "FIELD")
									    (name . "name")
									    (content (type . "CHOICE")
										     (members ((type . "SEQ")
											       (members ((type . "SYMBOL")
													 (name . identifier))
													((type . "REPEAT")
													 (content (type . "SEQ")
														  (members ((type . "STRING")
															    (value . "."))
															   ((type . "SYMBOL")
															    (name . identifier)))))))
											      ((type . "SYMBOL")
											       (name . aliased_import)))))
									   ((type . "REPEAT")
									    (content (type . "SEQ")
										     (members ((type . "STRING")
											       (value . ","))
											      ((type . "FIELD")
											       (name . "name")
											       (content (type . "CHOICE")
													(members ((type . "SEQ")
														  (members ((type . "SYMBOL")
															    (name . identifier))
															   ((type . "REPEAT")
															    (content (type . "SEQ")
																     (members ((type . "STRING")
																	       (value . "."))
																	      ((type . "SYMBOL")
																	       (name . identifier)))))))
														 ((type . "SYMBOL")
														  (name . aliased_import))))))))))
								 ((type . "CHOICE")
								  (members ((type . "STRING")
									    (value . ","))
									   ((type . "BLANK"))))))
						       ((type . "STRING")
							(value . ")"))))))))
 (import_from_statement (type . "SEQ")
			(members ((type . "STRING")
				  (value . "from"))
				 ((type . "FIELD")
				  (name . "module_name")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . relative_import))
						    ((type . "SEQ")
						     (members ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "REPEAT")
							       (content (type . "SEQ")
									(members ((type . "STRING")
										  (value . "."))
										 ((type . "SYMBOL")
										  (name . identifier))))))))))
				 ((type . "STRING")
				  (value . "import"))
				 ((type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . wildcard_import))
					   ((type . "SEQ")
					    (members ((type . "SEQ")
						      (members ((type . "FIELD")
								(name . "name")
								(content (type . "CHOICE")
									 (members ((type . "SEQ")
										   (members ((type . "SYMBOL")
											     (name . identifier))
											    ((type . "REPEAT")
											     (content (type . "SEQ")
												      (members ((type . "STRING")
														(value . "."))
													       ((type . "SYMBOL")
														(name . identifier)))))))
										  ((type . "SYMBOL")
										   (name . aliased_import)))))
							       ((type . "REPEAT")
								(content (type . "SEQ")
									 (members ((type . "STRING")
										   (value . ","))
										  ((type . "FIELD")
										   (name . "name")
										   (content (type . "CHOICE")
											    (members ((type . "SEQ")
												      (members ((type . "SYMBOL")
														(name . identifier))
													       ((type . "REPEAT")
														(content (type . "SEQ")
															 (members ((type . "STRING")
																   (value . "."))
																  ((type . "SYMBOL")
																   (name . identifier)))))))
												     ((type . "SYMBOL")
												      (name . aliased_import))))))))))
						     ((type . "CHOICE")
						      (members ((type . "STRING")
								(value . ","))
							       ((type . "BLANK"))))))
					   ((type . "SEQ")
					    (members ((type . "STRING")
						      (value . "("))
						     ((type . "SEQ")
						      (members ((type . "SEQ")
								(members ((type . "FIELD")
									  (name . "name")
									  (content (type . "CHOICE")
										   (members ((type . "SEQ")
											     (members ((type . "SYMBOL")
												       (name . identifier))
												      ((type . "REPEAT")
												       (content (type . "SEQ")
														(members ((type . "STRING")
															  (value . "."))
															 ((type . "SYMBOL")
															  (name . identifier)))))))
											    ((type . "SYMBOL")
											     (name . aliased_import)))))
									 ((type . "REPEAT")
									  (content (type . "SEQ")
										   (members ((type . "STRING")
											     (value . ","))
											    ((type . "FIELD")
											     (name . "name")
											     (content (type . "CHOICE")
												      (members ((type . "SEQ")
														(members ((type . "SYMBOL")
															  (name . identifier))
															 ((type . "REPEAT")
															  (content (type . "SEQ")
																   (members ((type . "STRING")
																	     (value . "."))
																	    ((type . "SYMBOL")
																	     (name . identifier)))))))
													       ((type . "SYMBOL")
														(name . aliased_import))))))))))
							       ((type . "CHOICE")
								(members ((type . "STRING")
									  (value . ","))
									 ((type . "BLANK"))))))
						     ((type . "STRING")
						      (value . ")"))))))))
 (_import_list (type . "SEQ")
	       (members ((type . "SEQ")
			 (members ((type . "FIELD")
				   (name . "name")
				   (content (type . "CHOICE")
					    (members ((type . "SEQ")
						      (members ((type . "SYMBOL")
								(name . identifier))
							       ((type . "REPEAT")
								(content (type . "SEQ")
									 (members ((type . "STRING")
										   (value . "."))
										  ((type . "SYMBOL")
										   (name . identifier)))))))
						     ((type . "SYMBOL")
						      (name . aliased_import)))))
				  ((type . "REPEAT")
				   (content (type . "SEQ")
					    (members ((type . "STRING")
						      (value . ","))
						     ((type . "FIELD")
						      (name . "name")
						      (content (type . "CHOICE")
							       (members ((type . "SEQ")
									 (members ((type . "SYMBOL")
										   (name . identifier))
										  ((type . "REPEAT")
										   (content (type . "SEQ")
											    (members ((type . "STRING")
												      (value . "."))
												     ((type . "SYMBOL")
												      (name . identifier)))))))
									((type . "SYMBOL")
									 (name . aliased_import))))))))))
			((type . "CHOICE")
			 (members ((type . "STRING")
				   (value . ","))
				  ((type . "BLANK"))))))
 (aliased_import (type . "SEQ")
		 (members ((type . "FIELD")
			   (name . "name")
			   (content (type . "SEQ")
				    (members ((type . "SYMBOL")
					      (name . identifier))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . "."))
								((type . "SYMBOL")
								 (name . identifier))))))))
			  ((type . "STRING")
			   (value . "as"))
			  ((type . "FIELD")
			   (name . "alias")
			   (content (type . "SYMBOL") (name . identifier)))))
 (wildcard_import (type . "STRING") (value . "*"))
 (print_statement (type . "CHOICE")
		  (members ((type . "PREC")
			    (value . 1)
			    (content (type . "SEQ")
				     (members ((type . "STRING")
					       (value . "print"))
					      ((type . "SYMBOL")
					       (name . chevron))
					      ((type . "REPEAT")
					       (content (type . "SEQ")
							(members ((type . "STRING")
								  (value . ","))
								 ((type . "FIELD")
								  (name . "argument")
								  (content (type . "SYMBOL")
									   (name . expression))))))
					      ((type . "CHOICE")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "BLANK")))))))
			   ((type . "PREC")
			    (value . -10)
			    (content (type . "SEQ")
				     (members ((type . "STRING")
					       (value . "print"))
					      ((type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "argument")
							 (content (type . "SYMBOL")
								  (name . expression)))
							((type . "REPEAT")
							 (content (type . "SEQ")
								  (members ((type . "STRING")
									    (value . ","))
									   ((type . "FIELD")
									    (name . "argument")
									    (content (type . "SYMBOL")
										     (name . expression))))))))
					      ((type . "CHOICE")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "BLANK")))))))))
 (chevron (type . "SEQ")
	  (members ((type . "STRING")
		    (value . ">>"))
		   ((type . "SYMBOL")
		    (name . expression))))
 (assert_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "assert"))
			    ((type . "SEQ")
			     (members ((type . "SYMBOL")
				       (name . expression))
				      ((type . "REPEAT")
				       (content (type . "SEQ")
						(members ((type . "STRING")
							  (value . ","))
							 ((type . "SYMBOL")
							  (name . expression)))))))))
 (comma_statement (type . "CHOICE")
		  (members ((type . "SEQ")
			    (members ((type . "SYMBOL")
				      (name . expression))
				     ((type . "STRING")
				      (value . ","))
				     ((type . "SEQ")
				      (members ((type . "SYMBOL")
						(name . expression))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "STRING")
								   (value . ","))
								  ((type . "SYMBOL")
								   (name . expression)))))))
				     ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . ","))
					       ((type . "BLANK"))))))))
 (named_expression (type . "SEQ")
		   (members ((type . "FIELD")
			     (name . "name")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . identifier))
					       ((type . "ALIAS")
						(content (type . "STRING")
							 (value . "match"))
						(named . t)
						(value . identifier)))))
			    ((type . "STRING")
			     (value . ":="))
			    ((type . "FIELD")
			     (name . "value")
			     (content (type . "SYMBOL") (name . expression)))))
 (_named_expresssion_lhs (type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . identifier))
				  ((type . "ALIAS")
				   (content (type . "STRING")
					    (value . "match"))
				   (named . t)
				   (value . identifier))))
 (return_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "return"))
			    ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . expression))
						((type . "SYMBOL")
						 (name . expression_list))))
				      ((type . "BLANK"))))))
 (delete_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "del"))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . expression))
				      ((type . "SYMBOL")
				       (name . expression_list))))))
 (_expressions (type . "CHOICE")
	       (members ((type . "SYMBOL")
			 (name . expression))
			((type . "SYMBOL")
			 (name . expression_list))))
 (raise_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "raise"))
			   ((type . "CHOICE")
			    (members ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . expression))
					       ((type . "SYMBOL")
						(name . expression_list))))
				     ((type . "BLANK"))))
			   ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "STRING")
						(value . "from"))
					       ((type . "FIELD")
						(name . "cause")
						(content (type . "SYMBOL")
							 (name . expression)))))
				     ((type . "BLANK"))))))
 (pass_statement (type . "PREC_LEFT")
		 (value . 0)
		 (content (type . "STRING") (value . "pass")))
 (break_statement (type . "PREC_LEFT")
		  (value . 0)
		  (content (type . "STRING") (value . "break")))
 (continue_statement (type . "PREC_LEFT")
		     (value . 0)
		     (content (type . "STRING") (value . "continue")))
 (_compound_statement (type . "CHOICE")
		      (members ((type . "SYMBOL")
				(name . if_statement))
			       ((type . "SYMBOL")
				(name . for_statement))
			       ((type . "SYMBOL")
				(name . while_statement))
			       ((type . "SYMBOL")
				(name . try_statement))
			       ((type . "SYMBOL")
				(name . with_statement))
			       ((type . "SYMBOL")
				(name . function_definition))
			       ((type . "SYMBOL")
				(name . class_definition))
			       ((type . "SYMBOL")
				(name . decorated_definition))
			       ((type . "SYMBOL")
				(name . match_statement))))
 (if_statement (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "if"))
			((type . "FIELD")
			 (name . "condition")
			 (content (type . "SYMBOL") (name . expression)))
			((type . "STRING")
			 (value . ":"))
			((type . "FIELD")
			 (name . "consequence")
			 (content (type . "CHOICE")
				  (members ((type . "ALIAS")
					    (content (type . "SEQ")
						     (members ((type . "SEQ")
							       (members ((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . expression))
										  ((type . "SYMBOL")
										   (name . future_import_statement))
										  ((type . "SYMBOL")
										   (name . import_statement))
										  ((type . "SYMBOL")
										   (name . import_from_statement))
										  ((type . "SYMBOL")
										   (name . print_statement))
										  ((type . "SYMBOL")
										   (name . assert_statement))
										  ((type . "SYMBOL")
										   (name . comma_statement))
										  ((type . "SYMBOL")
										   (name . return_statement))
										  ((type . "SYMBOL")
										   (name . delete_statement))
										  ((type . "SYMBOL")
										   (name . raise_statement))
										  ((type . "SYMBOL")
										   (name . pass_statement))
										  ((type . "SYMBOL")
										   (name . break_statement))
										  ((type . "SYMBOL")
										   (name . continue_statement))
										  ((type . "SYMBOL")
										   (name . global_statement))
										  ((type . "SYMBOL")
										   (name . nonlocal_statement))
										  ((type . "SYMBOL")
										   (name . assignment))
										  ((type . "SYMBOL")
										   (name . augmented_assignment))
										  ((type . "SYMBOL")
										   (name . yield))
										  ((type . "SYMBOL")
										   (name . exec_statement))))
									((type . "REPEAT")
									 (content (type . "SEQ")
										  (members ((type . "STRING")
											    (value . ";"))
											   ((type . "CHOICE")
											    (members ((type . "SYMBOL")
												      (name . expression))
												     ((type . "SYMBOL")
												      (name . future_import_statement))
												     ((type . "SYMBOL")
												      (name . import_statement))
												     ((type . "SYMBOL")
												      (name . import_from_statement))
												     ((type . "SYMBOL")
												      (name . print_statement))
												     ((type . "SYMBOL")
												      (name . assert_statement))
												     ((type . "SYMBOL")
												      (name . comma_statement))
												     ((type . "SYMBOL")
												      (name . return_statement))
												     ((type . "SYMBOL")
												      (name . delete_statement))
												     ((type . "SYMBOL")
												      (name . raise_statement))
												     ((type . "SYMBOL")
												      (name . pass_statement))
												     ((type . "SYMBOL")
												      (name . break_statement))
												     ((type . "SYMBOL")
												      (name . continue_statement))
												     ((type . "SYMBOL")
												      (name . global_statement))
												     ((type . "SYMBOL")
												      (name . nonlocal_statement))
												     ((type . "SYMBOL")
												      (name . assignment))
												     ((type . "SYMBOL")
												      (name . augmented_assignment))
												     ((type . "SYMBOL")
												      (name . yield))
												     ((type . "SYMBOL")
												      (name . exec_statement)))))))))
							      ((type . "CHOICE")
							       (members ((type . "STRING")
									 (value . ";"))
									((type . "BLANK"))))
							      ((type . "SYMBOL")
							       (name . _newline))))
					    (named . t)
					    (value . block))
					   ((type . "SEQ")
					    (members ((type . "SYMBOL")
						      (name . _indent))
						     ((type . "SYMBOL")
						      (name . block))))
					   ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . _newline))
					    (named . t)
					    (value . block)))))
			((type . "REPEAT")
			 (content (type . "FIELD")
				  (name . "alternative")
				  (content (type . "SYMBOL")
					   (name . elif_clause))))
			((type . "CHOICE")
			 (members ((type . "FIELD")
				   (name . "alternative")
				   (content (type . "SYMBOL")
					    (name . else_clause)))
				  ((type . "BLANK"))))))
 (elif_clause (type . "SEQ")
	      (members ((type . "STRING")
			(value . "elif"))
		       ((type . "FIELD")
			(name . "condition")
			(content (type . "SYMBOL") (name . expression)))
		       ((type . "STRING")
			(value . ":"))
		       ((type . "FIELD")
			(name . "consequence")
			(content (type . "CHOICE")
				 (members ((type . "ALIAS")
					   (content (type . "SEQ")
						    (members ((type . "SEQ")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . expression))
										 ((type . "SYMBOL")
										  (name . future_import_statement))
										 ((type . "SYMBOL")
										  (name . import_statement))
										 ((type . "SYMBOL")
										  (name . import_from_statement))
										 ((type . "SYMBOL")
										  (name . print_statement))
										 ((type . "SYMBOL")
										  (name . assert_statement))
										 ((type . "SYMBOL")
										  (name . comma_statement))
										 ((type . "SYMBOL")
										  (name . return_statement))
										 ((type . "SYMBOL")
										  (name . delete_statement))
										 ((type . "SYMBOL")
										  (name . raise_statement))
										 ((type . "SYMBOL")
										  (name . pass_statement))
										 ((type . "SYMBOL")
										  (name . break_statement))
										 ((type . "SYMBOL")
										  (name . continue_statement))
										 ((type . "SYMBOL")
										  (name . global_statement))
										 ((type . "SYMBOL")
										  (name . nonlocal_statement))
										 ((type . "SYMBOL")
										  (name . assignment))
										 ((type . "SYMBOL")
										  (name . augmented_assignment))
										 ((type . "SYMBOL")
										  (name . yield))
										 ((type . "SYMBOL")
										  (name . exec_statement))))
								       ((type . "REPEAT")
									(content (type . "SEQ")
										 (members ((type . "STRING")
											   (value . ";"))
											  ((type . "CHOICE")
											   (members ((type . "SYMBOL")
												     (name . expression))
												    ((type . "SYMBOL")
												     (name . future_import_statement))
												    ((type . "SYMBOL")
												     (name . import_statement))
												    ((type . "SYMBOL")
												     (name . import_from_statement))
												    ((type . "SYMBOL")
												     (name . print_statement))
												    ((type . "SYMBOL")
												     (name . assert_statement))
												    ((type . "SYMBOL")
												     (name . comma_statement))
												    ((type . "SYMBOL")
												     (name . return_statement))
												    ((type . "SYMBOL")
												     (name . delete_statement))
												    ((type . "SYMBOL")
												     (name . raise_statement))
												    ((type . "SYMBOL")
												     (name . pass_statement))
												    ((type . "SYMBOL")
												     (name . break_statement))
												    ((type . "SYMBOL")
												     (name . continue_statement))
												    ((type . "SYMBOL")
												     (name . global_statement))
												    ((type . "SYMBOL")
												     (name . nonlocal_statement))
												    ((type . "SYMBOL")
												     (name . assignment))
												    ((type . "SYMBOL")
												     (name . augmented_assignment))
												    ((type . "SYMBOL")
												     (name . yield))
												    ((type . "SYMBOL")
												     (name . exec_statement)))))))))
							     ((type . "CHOICE")
							      (members ((type . "STRING")
									(value . ";"))
								       ((type . "BLANK"))))
							     ((type . "SYMBOL")
							      (name . _newline))))
					   (named . t)
					   (value . block))
					  ((type . "SEQ")
					   (members ((type . "SYMBOL")
						     (name . _indent))
						    ((type . "SYMBOL")
						     (name . block))))
					  ((type . "ALIAS")
					   (content (type . "SYMBOL")
						    (name . _newline))
					   (named . t)
					   (value . block)))))))
 (else_clause (type . "SEQ")
	      (members ((type . "STRING")
			(value . "else"))
		       ((type . "STRING")
			(value . ":"))
		       ((type . "FIELD")
			(name . "body")
			(content (type . "CHOICE")
				 (members ((type . "ALIAS")
					   (content (type . "SEQ")
						    (members ((type . "SEQ")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . expression))
										 ((type . "SYMBOL")
										  (name . future_import_statement))
										 ((type . "SYMBOL")
										  (name . import_statement))
										 ((type . "SYMBOL")
										  (name . import_from_statement))
										 ((type . "SYMBOL")
										  (name . print_statement))
										 ((type . "SYMBOL")
										  (name . assert_statement))
										 ((type . "SYMBOL")
										  (name . comma_statement))
										 ((type . "SYMBOL")
										  (name . return_statement))
										 ((type . "SYMBOL")
										  (name . delete_statement))
										 ((type . "SYMBOL")
										  (name . raise_statement))
										 ((type . "SYMBOL")
										  (name . pass_statement))
										 ((type . "SYMBOL")
										  (name . break_statement))
										 ((type . "SYMBOL")
										  (name . continue_statement))
										 ((type . "SYMBOL")
										  (name . global_statement))
										 ((type . "SYMBOL")
										  (name . nonlocal_statement))
										 ((type . "SYMBOL")
										  (name . assignment))
										 ((type . "SYMBOL")
										  (name . augmented_assignment))
										 ((type . "SYMBOL")
										  (name . yield))
										 ((type . "SYMBOL")
										  (name . exec_statement))))
								       ((type . "REPEAT")
									(content (type . "SEQ")
										 (members ((type . "STRING")
											   (value . ";"))
											  ((type . "CHOICE")
											   (members ((type . "SYMBOL")
												     (name . expression))
												    ((type . "SYMBOL")
												     (name . future_import_statement))
												    ((type . "SYMBOL")
												     (name . import_statement))
												    ((type . "SYMBOL")
												     (name . import_from_statement))
												    ((type . "SYMBOL")
												     (name . print_statement))
												    ((type . "SYMBOL")
												     (name . assert_statement))
												    ((type . "SYMBOL")
												     (name . comma_statement))
												    ((type . "SYMBOL")
												     (name . return_statement))
												    ((type . "SYMBOL")
												     (name . delete_statement))
												    ((type . "SYMBOL")
												     (name . raise_statement))
												    ((type . "SYMBOL")
												     (name . pass_statement))
												    ((type . "SYMBOL")
												     (name . break_statement))
												    ((type . "SYMBOL")
												     (name . continue_statement))
												    ((type . "SYMBOL")
												     (name . global_statement))
												    ((type . "SYMBOL")
												     (name . nonlocal_statement))
												    ((type . "SYMBOL")
												     (name . assignment))
												    ((type . "SYMBOL")
												     (name . augmented_assignment))
												    ((type . "SYMBOL")
												     (name . yield))
												    ((type . "SYMBOL")
												     (name . exec_statement)))))))))
							     ((type . "CHOICE")
							      (members ((type . "STRING")
									(value . ";"))
								       ((type . "BLANK"))))
							     ((type . "SYMBOL")
							      (name . _newline))))
					   (named . t)
					   (value . block))
					  ((type . "SEQ")
					   (members ((type . "SYMBOL")
						     (name . _indent))
						    ((type . "SYMBOL")
						     (name . block))))
					  ((type . "ALIAS")
					   (content (type . "SYMBOL")
						    (name . _newline))
					   (named . t)
					   (value . block)))))))
 (match_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "match"))
			   ((type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "subject")
				      (content (type . "SYMBOL")
					       (name . expression)))
				     ((type . "REPEAT")
				      (content (type . "SEQ")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "FIELD")
							 (name . "subject")
							 (content (type . "SYMBOL")
								  (name . expression))))))))
			   ((type . "CHOICE")
			    (members ((type . "STRING")
				      (value . ","))
				     ((type . "BLANK"))))
			   ((type . "STRING")
			    (value . ":"))
			   ((type . "REPEAT")
			    (content (type . "FIELD")
				     (name . "alternative")
				     (content (type . "SYMBOL")
					      (name . case_clause))))))
 (case_clause (type . "SEQ")
	      (members ((type . "STRING")
			(value . "case"))
		       ((type . "SEQ")
			(members ((type . "FIELD")
				  (name . "pattern")
				  (content (type . "ALIAS")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . expression))
							     ((type . "SYMBOL")
							      (name . list_splat_pattern))))
					   (named . t)
					   (value . case_pattern)))
				 ((type . "REPEAT")
				  (content (type . "SEQ")
					   (members ((type . "STRING")
						     (value . ","))
						    ((type . "FIELD")
						     (name . "pattern")
						     (content (type . "ALIAS")
							      (content (type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . expression))
										((type . "SYMBOL")
										 (name . list_splat_pattern))))
							      (named . t)
							      (value . case_pattern))))))))
		       ((type . "CHOICE")
			(members ((type . "STRING")
				  (value . ","))
				 ((type . "BLANK"))))
		       ((type . "CHOICE")
			(members ((type . "FIELD")
				  (name . "guard")
				  (content (type . "SEQ")
					   (members ((type . "STRING")
						     (value . "if"))
						    ((type . "SYMBOL")
						     (name . expression)))))
				 ((type . "BLANK"))))
		       ((type . "STRING")
			(value . ":"))
		       ((type . "FIELD")
			(name . "consequence")
			(content (type . "CHOICE")
				 (members ((type . "ALIAS")
					   (content (type . "SEQ")
						    (members ((type . "SEQ")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . expression))
										 ((type . "SYMBOL")
										  (name . future_import_statement))
										 ((type . "SYMBOL")
										  (name . import_statement))
										 ((type . "SYMBOL")
										  (name . import_from_statement))
										 ((type . "SYMBOL")
										  (name . print_statement))
										 ((type . "SYMBOL")
										  (name . assert_statement))
										 ((type . "SYMBOL")
										  (name . comma_statement))
										 ((type . "SYMBOL")
										  (name . return_statement))
										 ((type . "SYMBOL")
										  (name . delete_statement))
										 ((type . "SYMBOL")
										  (name . raise_statement))
										 ((type . "SYMBOL")
										  (name . pass_statement))
										 ((type . "SYMBOL")
										  (name . break_statement))
										 ((type . "SYMBOL")
										  (name . continue_statement))
										 ((type . "SYMBOL")
										  (name . global_statement))
										 ((type . "SYMBOL")
										  (name . nonlocal_statement))
										 ((type . "SYMBOL")
										  (name . assignment))
										 ((type . "SYMBOL")
										  (name . augmented_assignment))
										 ((type . "SYMBOL")
										  (name . yield))
										 ((type . "SYMBOL")
										  (name . exec_statement))))
								       ((type . "REPEAT")
									(content (type . "SEQ")
										 (members ((type . "STRING")
											   (value . ";"))
											  ((type . "CHOICE")
											   (members ((type . "SYMBOL")
												     (name . expression))
												    ((type . "SYMBOL")
												     (name . future_import_statement))
												    ((type . "SYMBOL")
												     (name . import_statement))
												    ((type . "SYMBOL")
												     (name . import_from_statement))
												    ((type . "SYMBOL")
												     (name . print_statement))
												    ((type . "SYMBOL")
												     (name . assert_statement))
												    ((type . "SYMBOL")
												     (name . comma_statement))
												    ((type . "SYMBOL")
												     (name . return_statement))
												    ((type . "SYMBOL")
												     (name . delete_statement))
												    ((type . "SYMBOL")
												     (name . raise_statement))
												    ((type . "SYMBOL")
												     (name . pass_statement))
												    ((type . "SYMBOL")
												     (name . break_statement))
												    ((type . "SYMBOL")
												     (name . continue_statement))
												    ((type . "SYMBOL")
												     (name . global_statement))
												    ((type . "SYMBOL")
												     (name . nonlocal_statement))
												    ((type . "SYMBOL")
												     (name . assignment))
												    ((type . "SYMBOL")
												     (name . augmented_assignment))
												    ((type . "SYMBOL")
												     (name . yield))
												    ((type . "SYMBOL")
												     (name . exec_statement)))))))))
							     ((type . "CHOICE")
							      (members ((type . "STRING")
									(value . ";"))
								       ((type . "BLANK"))))
							     ((type . "SYMBOL")
							      (name . _newline))))
					   (named . t)
					   (value . block))
					  ((type . "SEQ")
					   (members ((type . "SYMBOL")
						     (name . _indent))
						    ((type . "SYMBOL")
						     (name . block))))
					  ((type . "ALIAS")
					   (content (type . "SYMBOL")
						    (name . _newline))
					   (named . t)
					   (value . block)))))))
 (for_statement (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "STRING")
				    (value . "async"))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . "for"))
			 ((type . "FIELD")
			  (name . "left")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . pattern))
					    ((type . "SYMBOL")
					     (name . pattern_list)))))
			 ((type . "STRING")
			  (value . "in"))
			 ((type . "FIELD")
			  (name . "right")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . expression))
					    ((type . "SYMBOL")
					     (name . expression_list)))))
			 ((type . "STRING")
			  (value . ":"))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "CHOICE")
				   (members ((type . "ALIAS")
					     (content (type . "SEQ")
						      (members ((type . "SEQ")
								(members ((type . "CHOICE")
									  (members ((type . "SYMBOL")
										    (name . expression))
										   ((type . "SYMBOL")
										    (name . future_import_statement))
										   ((type . "SYMBOL")
										    (name . import_statement))
										   ((type . "SYMBOL")
										    (name . import_from_statement))
										   ((type . "SYMBOL")
										    (name . print_statement))
										   ((type . "SYMBOL")
										    (name . assert_statement))
										   ((type . "SYMBOL")
										    (name . comma_statement))
										   ((type . "SYMBOL")
										    (name . return_statement))
										   ((type . "SYMBOL")
										    (name . delete_statement))
										   ((type . "SYMBOL")
										    (name . raise_statement))
										   ((type . "SYMBOL")
										    (name . pass_statement))
										   ((type . "SYMBOL")
										    (name . break_statement))
										   ((type . "SYMBOL")
										    (name . continue_statement))
										   ((type . "SYMBOL")
										    (name . global_statement))
										   ((type . "SYMBOL")
										    (name . nonlocal_statement))
										   ((type . "SYMBOL")
										    (name . assignment))
										   ((type . "SYMBOL")
										    (name . augmented_assignment))
										   ((type . "SYMBOL")
										    (name . yield))
										   ((type . "SYMBOL")
										    (name . exec_statement))))
									 ((type . "REPEAT")
									  (content (type . "SEQ")
										   (members ((type . "STRING")
											     (value . ";"))
											    ((type . "CHOICE")
											     (members ((type . "SYMBOL")
												       (name . expression))
												      ((type . "SYMBOL")
												       (name . future_import_statement))
												      ((type . "SYMBOL")
												       (name . import_statement))
												      ((type . "SYMBOL")
												       (name . import_from_statement))
												      ((type . "SYMBOL")
												       (name . print_statement))
												      ((type . "SYMBOL")
												       (name . assert_statement))
												      ((type . "SYMBOL")
												       (name . comma_statement))
												      ((type . "SYMBOL")
												       (name . return_statement))
												      ((type . "SYMBOL")
												       (name . delete_statement))
												      ((type . "SYMBOL")
												       (name . raise_statement))
												      ((type . "SYMBOL")
												       (name . pass_statement))
												      ((type . "SYMBOL")
												       (name . break_statement))
												      ((type . "SYMBOL")
												       (name . continue_statement))
												      ((type . "SYMBOL")
												       (name . global_statement))
												      ((type . "SYMBOL")
												       (name . nonlocal_statement))
												      ((type . "SYMBOL")
												       (name . assignment))
												      ((type . "SYMBOL")
												       (name . augmented_assignment))
												      ((type . "SYMBOL")
												       (name . yield))
												      ((type . "SYMBOL")
												       (name . exec_statement)))))))))
							       ((type . "CHOICE")
								(members ((type . "STRING")
									  (value . ";"))
									 ((type . "BLANK"))))
							       ((type . "SYMBOL")
								(name . _newline))))
					     (named . t)
					     (value . block))
					    ((type . "SEQ")
					     (members ((type . "SYMBOL")
						       (name . _indent))
						      ((type . "SYMBOL")
						       (name . block))))
					    ((type . "ALIAS")
					     (content (type . "SYMBOL")
						      (name . _newline))
					     (named . t)
					     (value . block)))))
			 ((type . "FIELD")
			  (name . "alternative")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . else_clause))
					    ((type . "BLANK")))))))
 (while_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "while"))
			   ((type . "FIELD")
			    (name . "condition")
			    (content (type . "SYMBOL") (name . expression)))
			   ((type . "STRING")
			    (value . ":"))
			   ((type . "FIELD")
			    (name . "body")
			    (content (type . "CHOICE")
				     (members ((type . "ALIAS")
					       (content (type . "SEQ")
							(members ((type . "SEQ")
								  (members ((type . "CHOICE")
									    (members ((type . "SYMBOL")
										      (name . expression))
										     ((type . "SYMBOL")
										      (name . future_import_statement))
										     ((type . "SYMBOL")
										      (name . import_statement))
										     ((type . "SYMBOL")
										      (name . import_from_statement))
										     ((type . "SYMBOL")
										      (name . print_statement))
										     ((type . "SYMBOL")
										      (name . assert_statement))
										     ((type . "SYMBOL")
										      (name . comma_statement))
										     ((type . "SYMBOL")
										      (name . return_statement))
										     ((type . "SYMBOL")
										      (name . delete_statement))
										     ((type . "SYMBOL")
										      (name . raise_statement))
										     ((type . "SYMBOL")
										      (name . pass_statement))
										     ((type . "SYMBOL")
										      (name . break_statement))
										     ((type . "SYMBOL")
										      (name . continue_statement))
										     ((type . "SYMBOL")
										      (name . global_statement))
										     ((type . "SYMBOL")
										      (name . nonlocal_statement))
										     ((type . "SYMBOL")
										      (name . assignment))
										     ((type . "SYMBOL")
										      (name . augmented_assignment))
										     ((type . "SYMBOL")
										      (name . yield))
										     ((type . "SYMBOL")
										      (name . exec_statement))))
									   ((type . "REPEAT")
									    (content (type . "SEQ")
										     (members ((type . "STRING")
											       (value . ";"))
											      ((type . "CHOICE")
											       (members ((type . "SYMBOL")
													 (name . expression))
													((type . "SYMBOL")
													 (name . future_import_statement))
													((type . "SYMBOL")
													 (name . import_statement))
													((type . "SYMBOL")
													 (name . import_from_statement))
													((type . "SYMBOL")
													 (name . print_statement))
													((type . "SYMBOL")
													 (name . assert_statement))
													((type . "SYMBOL")
													 (name . comma_statement))
													((type . "SYMBOL")
													 (name . return_statement))
													((type . "SYMBOL")
													 (name . delete_statement))
													((type . "SYMBOL")
													 (name . raise_statement))
													((type . "SYMBOL")
													 (name . pass_statement))
													((type . "SYMBOL")
													 (name . break_statement))
													((type . "SYMBOL")
													 (name . continue_statement))
													((type . "SYMBOL")
													 (name . global_statement))
													((type . "SYMBOL")
													 (name . nonlocal_statement))
													((type . "SYMBOL")
													 (name . assignment))
													((type . "SYMBOL")
													 (name . augmented_assignment))
													((type . "SYMBOL")
													 (name . yield))
													((type . "SYMBOL")
													 (name . exec_statement)))))))))
								 ((type . "CHOICE")
								  (members ((type . "STRING")
									    (value . ";"))
									   ((type . "BLANK"))))
								 ((type . "SYMBOL")
								  (name . _newline))))
					       (named . t)
					       (value . block))
					      ((type . "SEQ")
					       (members ((type . "SYMBOL")
							 (name . _indent))
							((type . "SYMBOL")
							 (name . block))))
					      ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . _newline))
					       (named . t)
					       (value . block)))))
			   ((type . "CHOICE")
			    (members ((type . "FIELD")
				      (name . "alternative")
				      (content (type . "SYMBOL")
					       (name . else_clause)))
				     ((type . "BLANK"))))))
 (try_statement (type . "SEQ")
		(members ((type . "STRING")
			  (value . "try"))
			 ((type . "STRING")
			  (value . ":"))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "CHOICE")
				   (members ((type . "ALIAS")
					     (content (type . "SEQ")
						      (members ((type . "SEQ")
								(members ((type . "CHOICE")
									  (members ((type . "SYMBOL")
										    (name . expression))
										   ((type . "SYMBOL")
										    (name . future_import_statement))
										   ((type . "SYMBOL")
										    (name . import_statement))
										   ((type . "SYMBOL")
										    (name . import_from_statement))
										   ((type . "SYMBOL")
										    (name . print_statement))
										   ((type . "SYMBOL")
										    (name . assert_statement))
										   ((type . "SYMBOL")
										    (name . comma_statement))
										   ((type . "SYMBOL")
										    (name . return_statement))
										   ((type . "SYMBOL")
										    (name . delete_statement))
										   ((type . "SYMBOL")
										    (name . raise_statement))
										   ((type . "SYMBOL")
										    (name . pass_statement))
										   ((type . "SYMBOL")
										    (name . break_statement))
										   ((type . "SYMBOL")
										    (name . continue_statement))
										   ((type . "SYMBOL")
										    (name . global_statement))
										   ((type . "SYMBOL")
										    (name . nonlocal_statement))
										   ((type . "SYMBOL")
										    (name . assignment))
										   ((type . "SYMBOL")
										    (name . augmented_assignment))
										   ((type . "SYMBOL")
										    (name . yield))
										   ((type . "SYMBOL")
										    (name . exec_statement))))
									 ((type . "REPEAT")
									  (content (type . "SEQ")
										   (members ((type . "STRING")
											     (value . ";"))
											    ((type . "CHOICE")
											     (members ((type . "SYMBOL")
												       (name . expression))
												      ((type . "SYMBOL")
												       (name . future_import_statement))
												      ((type . "SYMBOL")
												       (name . import_statement))
												      ((type . "SYMBOL")
												       (name . import_from_statement))
												      ((type . "SYMBOL")
												       (name . print_statement))
												      ((type . "SYMBOL")
												       (name . assert_statement))
												      ((type . "SYMBOL")
												       (name . comma_statement))
												      ((type . "SYMBOL")
												       (name . return_statement))
												      ((type . "SYMBOL")
												       (name . delete_statement))
												      ((type . "SYMBOL")
												       (name . raise_statement))
												      ((type . "SYMBOL")
												       (name . pass_statement))
												      ((type . "SYMBOL")
												       (name . break_statement))
												      ((type . "SYMBOL")
												       (name . continue_statement))
												      ((type . "SYMBOL")
												       (name . global_statement))
												      ((type . "SYMBOL")
												       (name . nonlocal_statement))
												      ((type . "SYMBOL")
												       (name . assignment))
												      ((type . "SYMBOL")
												       (name . augmented_assignment))
												      ((type . "SYMBOL")
												       (name . yield))
												      ((type . "SYMBOL")
												       (name . exec_statement)))))))))
							       ((type . "CHOICE")
								(members ((type . "STRING")
									  (value . ";"))
									 ((type . "BLANK"))))
							       ((type . "SYMBOL")
								(name . _newline))))
					     (named . t)
					     (value . block))
					    ((type . "SEQ")
					     (members ((type . "SYMBOL")
						       (name . _indent))
						      ((type . "SYMBOL")
						       (name . block))))
					    ((type . "ALIAS")
					     (content (type . "SYMBOL")
						      (name . _newline))
					     (named . t)
					     (value . block)))))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "REPEAT1")
					      (content (type . "SYMBOL")
						       (name . except_clause)))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . else_clause))
						       ((type . "BLANK"))))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . finally_clause))
						       ((type . "BLANK"))))))
				   ((type . "SYMBOL")
				    (name . finally_clause))))))
 (except_clause (type . "SEQ")
		(members ((type . "STRING")
			  (value . "except"))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "SYMBOL")
					      (name . expression))
					     ((type . "CHOICE")
					      (members ((type . "SEQ")
							(members ((type . "CHOICE")
								  (members ((type . "STRING")
									    (value . "as"))
									   ((type . "STRING")
									    (value . ","))))
								 ((type . "SYMBOL")
								  (name . expression))))
						       ((type . "BLANK"))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . ":"))
			 ((type . "CHOICE")
			  (members ((type . "ALIAS")
				    (content (type . "SEQ")
					     (members ((type . "SEQ")
						       (members ((type . "CHOICE")
								 (members ((type . "SYMBOL")
									   (name . expression))
									  ((type . "SYMBOL")
									   (name . future_import_statement))
									  ((type . "SYMBOL")
									   (name . import_statement))
									  ((type . "SYMBOL")
									   (name . import_from_statement))
									  ((type . "SYMBOL")
									   (name . print_statement))
									  ((type . "SYMBOL")
									   (name . assert_statement))
									  ((type . "SYMBOL")
									   (name . comma_statement))
									  ((type . "SYMBOL")
									   (name . return_statement))
									  ((type . "SYMBOL")
									   (name . delete_statement))
									  ((type . "SYMBOL")
									   (name . raise_statement))
									  ((type . "SYMBOL")
									   (name . pass_statement))
									  ((type . "SYMBOL")
									   (name . break_statement))
									  ((type . "SYMBOL")
									   (name . continue_statement))
									  ((type . "SYMBOL")
									   (name . global_statement))
									  ((type . "SYMBOL")
									   (name . nonlocal_statement))
									  ((type . "SYMBOL")
									   (name . assignment))
									  ((type . "SYMBOL")
									   (name . augmented_assignment))
									  ((type . "SYMBOL")
									   (name . yield))
									  ((type . "SYMBOL")
									   (name . exec_statement))))
								((type . "REPEAT")
								 (content (type . "SEQ")
									  (members ((type . "STRING")
										    (value . ";"))
										   ((type . "CHOICE")
										    (members ((type . "SYMBOL")
											      (name . expression))
											     ((type . "SYMBOL")
											      (name . future_import_statement))
											     ((type . "SYMBOL")
											      (name . import_statement))
											     ((type . "SYMBOL")
											      (name . import_from_statement))
											     ((type . "SYMBOL")
											      (name . print_statement))
											     ((type . "SYMBOL")
											      (name . assert_statement))
											     ((type . "SYMBOL")
											      (name . comma_statement))
											     ((type . "SYMBOL")
											      (name . return_statement))
											     ((type . "SYMBOL")
											      (name . delete_statement))
											     ((type . "SYMBOL")
											      (name . raise_statement))
											     ((type . "SYMBOL")
											      (name . pass_statement))
											     ((type . "SYMBOL")
											      (name . break_statement))
											     ((type . "SYMBOL")
											      (name . continue_statement))
											     ((type . "SYMBOL")
											      (name . global_statement))
											     ((type . "SYMBOL")
											      (name . nonlocal_statement))
											     ((type . "SYMBOL")
											      (name . assignment))
											     ((type . "SYMBOL")
											      (name . augmented_assignment))
											     ((type . "SYMBOL")
											      (name . yield))
											     ((type . "SYMBOL")
											      (name . exec_statement)))))))))
						      ((type . "CHOICE")
						       (members ((type . "STRING")
								 (value . ";"))
								((type . "BLANK"))))
						      ((type . "SYMBOL")
						       (name . _newline))))
				    (named . t)
				    (value . block))
				   ((type . "SEQ")
				    (members ((type . "SYMBOL")
					      (name . _indent))
					     ((type . "SYMBOL")
					      (name . block))))
				   ((type . "ALIAS")
				    (content (type . "SYMBOL")
					     (name . _newline))
				    (named . t)
				    (value . block))))))
 (finally_clause (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "finally"))
			  ((type . "STRING")
			   (value . ":"))
			  ((type . "CHOICE")
			   (members ((type . "ALIAS")
				     (content (type . "SEQ")
					      (members ((type . "SEQ")
							(members ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . expression))
									   ((type . "SYMBOL")
									    (name . future_import_statement))
									   ((type . "SYMBOL")
									    (name . import_statement))
									   ((type . "SYMBOL")
									    (name . import_from_statement))
									   ((type . "SYMBOL")
									    (name . print_statement))
									   ((type . "SYMBOL")
									    (name . assert_statement))
									   ((type . "SYMBOL")
									    (name . comma_statement))
									   ((type . "SYMBOL")
									    (name . return_statement))
									   ((type . "SYMBOL")
									    (name . delete_statement))
									   ((type . "SYMBOL")
									    (name . raise_statement))
									   ((type . "SYMBOL")
									    (name . pass_statement))
									   ((type . "SYMBOL")
									    (name . break_statement))
									   ((type . "SYMBOL")
									    (name . continue_statement))
									   ((type . "SYMBOL")
									    (name . global_statement))
									   ((type . "SYMBOL")
									    (name . nonlocal_statement))
									   ((type . "SYMBOL")
									    (name . assignment))
									   ((type . "SYMBOL")
									    (name . augmented_assignment))
									   ((type . "SYMBOL")
									    (name . yield))
									   ((type . "SYMBOL")
									    (name . exec_statement))))
								 ((type . "REPEAT")
								  (content (type . "SEQ")
									   (members ((type . "STRING")
										     (value . ";"))
										    ((type . "CHOICE")
										     (members ((type . "SYMBOL")
											       (name . expression))
											      ((type . "SYMBOL")
											       (name . future_import_statement))
											      ((type . "SYMBOL")
											       (name . import_statement))
											      ((type . "SYMBOL")
											       (name . import_from_statement))
											      ((type . "SYMBOL")
											       (name . print_statement))
											      ((type . "SYMBOL")
											       (name . assert_statement))
											      ((type . "SYMBOL")
											       (name . comma_statement))
											      ((type . "SYMBOL")
											       (name . return_statement))
											      ((type . "SYMBOL")
											       (name . delete_statement))
											      ((type . "SYMBOL")
											       (name . raise_statement))
											      ((type . "SYMBOL")
											       (name . pass_statement))
											      ((type . "SYMBOL")
											       (name . break_statement))
											      ((type . "SYMBOL")
											       (name . continue_statement))
											      ((type . "SYMBOL")
											       (name . global_statement))
											      ((type . "SYMBOL")
											       (name . nonlocal_statement))
											      ((type . "SYMBOL")
											       (name . assignment))
											      ((type . "SYMBOL")
											       (name . augmented_assignment))
											      ((type . "SYMBOL")
											       (name . yield))
											      ((type . "SYMBOL")
											       (name . exec_statement)))))))))
						       ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . ";"))
								 ((type . "BLANK"))))
						       ((type . "SYMBOL")
							(name . _newline))))
				     (named . t)
				     (value . block))
				    ((type . "SEQ")
				     (members ((type . "SYMBOL")
					       (name . _indent))
					      ((type . "SYMBOL")
					       (name . block))))
				    ((type . "ALIAS")
				     (content (type . "SYMBOL")
					      (name . _newline))
				     (named . t)
				     (value . block))))))
 (with_statement (type . "SEQ")
		 (members ((type . "CHOICE")
			   (members ((type . "STRING")
				     (value . "async"))
				    ((type . "BLANK"))))
			  ((type . "STRING")
			   (value . "with"))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "PREC_DYNAMIC")
					       (value . -1)
					       (content (type . "SEQ")
							(members ((type . "FIELD")
								  (name . "value")
								  (content (type . "SYMBOL")
									   (name . expression))))))
					      ((type . "REPEAT")
					       (content (type . "SEQ")
							(members ((type . "STRING")
								  (value . ","))
								 ((type . "PREC_DYNAMIC")
								  (value . -1)
								  (content (type . "SEQ")
									   (members ((type . "FIELD")
										     (name . "value")
										     (content (type . "SYMBOL")
											      (name . expression)))))))))))
				    ((type . "SEQ")
				     (members ((type . "STRING")
					       (value . "("))
					      ((type . "SEQ")
					       (members ((type . "PREC_DYNAMIC")
							 (value . -1)
							 (content (type . "SEQ")
								  (members ((type . "FIELD")
									    (name . "value")
									    (content (type . "SYMBOL")
										     (name . expression))))))
							((type . "REPEAT")
							 (content (type . "SEQ")
								  (members ((type . "STRING")
									    (value . ","))
									   ((type . "PREC_DYNAMIC")
									    (value . -1)
									    (content (type . "SEQ")
										     (members ((type . "FIELD")
											       (name . "value")
											       (content (type . "SYMBOL")
													(name . expression)))))))))))
					      ((type . "STRING")
					       (value . ")"))))))
			  ((type . "STRING")
			   (value . ":"))
			  ((type . "FIELD")
			   (name . "body")
			   (content (type . "CHOICE")
				    (members ((type . "ALIAS")
					      (content (type . "SEQ")
						       (members ((type . "SEQ")
								 (members ((type . "CHOICE")
									   (members ((type . "SYMBOL")
										     (name . expression))
										    ((type . "SYMBOL")
										     (name . future_import_statement))
										    ((type . "SYMBOL")
										     (name . import_statement))
										    ((type . "SYMBOL")
										     (name . import_from_statement))
										    ((type . "SYMBOL")
										     (name . print_statement))
										    ((type . "SYMBOL")
										     (name . assert_statement))
										    ((type . "SYMBOL")
										     (name . comma_statement))
										    ((type . "SYMBOL")
										     (name . return_statement))
										    ((type . "SYMBOL")
										     (name . delete_statement))
										    ((type . "SYMBOL")
										     (name . raise_statement))
										    ((type . "SYMBOL")
										     (name . pass_statement))
										    ((type . "SYMBOL")
										     (name . break_statement))
										    ((type . "SYMBOL")
										     (name . continue_statement))
										    ((type . "SYMBOL")
										     (name . global_statement))
										    ((type . "SYMBOL")
										     (name . nonlocal_statement))
										    ((type . "SYMBOL")
										     (name . assignment))
										    ((type . "SYMBOL")
										     (name . augmented_assignment))
										    ((type . "SYMBOL")
										     (name . yield))
										    ((type . "SYMBOL")
										     (name . exec_statement))))
									  ((type . "REPEAT")
									   (content (type . "SEQ")
										    (members ((type . "STRING")
											      (value . ";"))
											     ((type . "CHOICE")
											      (members ((type . "SYMBOL")
													(name . expression))
												       ((type . "SYMBOL")
													(name . future_import_statement))
												       ((type . "SYMBOL")
													(name . import_statement))
												       ((type . "SYMBOL")
													(name . import_from_statement))
												       ((type . "SYMBOL")
													(name . print_statement))
												       ((type . "SYMBOL")
													(name . assert_statement))
												       ((type . "SYMBOL")
													(name . comma_statement))
												       ((type . "SYMBOL")
													(name . return_statement))
												       ((type . "SYMBOL")
													(name . delete_statement))
												       ((type . "SYMBOL")
													(name . raise_statement))
												       ((type . "SYMBOL")
													(name . pass_statement))
												       ((type . "SYMBOL")
													(name . break_statement))
												       ((type . "SYMBOL")
													(name . continue_statement))
												       ((type . "SYMBOL")
													(name . global_statement))
												       ((type . "SYMBOL")
													(name . nonlocal_statement))
												       ((type . "SYMBOL")
													(name . assignment))
												       ((type . "SYMBOL")
													(name . augmented_assignment))
												       ((type . "SYMBOL")
													(name . yield))
												       ((type . "SYMBOL")
													(name . exec_statement)))))))))
								((type . "CHOICE")
								 (members ((type . "STRING")
									   (value . ";"))
									  ((type . "BLANK"))))
								((type . "SYMBOL")
								 (name . _newline))))
					      (named . t)
					      (value . block))
					     ((type . "SEQ")
					      (members ((type . "SYMBOL")
							(name . _indent))
						       ((type . "SYMBOL")
							(name . block))))
					     ((type . "ALIAS")
					      (content (type . "SYMBOL")
						       (name . _newline))
					      (named . t)
					      (value . block)))))))
 (_with_item (type . "PREC_DYNAMIC")
	     (value . -1)
	     (content (type . "SEQ")
		      (members ((type . "FIELD")
				(name . "value")
				(content (type . "SYMBOL")
					 (name . expression))))))
 (function_definition (type . "SEQ")
		      (members ((type . "CHOICE")
				(members ((type . "STRING")
					  (value . "async"))
					 ((type . "BLANK"))))
			       ((type . "STRING")
				(value . "def"))
			       ((type . "FIELD")
				(name . "name")
				(content (type . "SYMBOL")
					 (name . identifier)))
			       ((type . "FIELD")
				(name . "parameters")
				(content (type . "SYMBOL")
					 (name . parameters)))
			       ((type . "CHOICE")
				(members ((type . "SEQ")
					  (members ((type . "STRING")
						    (value . "->"))
						   ((type . "FIELD")
						    (name . "return_type")
						    (content (type . "SYMBOL")
							     (name . expression)))))
					 ((type . "BLANK"))))
			       ((type . "STRING")
				(value . ":"))
			       ((type . "FIELD")
				(name . "body")
				(content (type . "CHOICE")
					 (members ((type . "ALIAS")
						   (content (type . "SEQ")
							    (members ((type . "SEQ")
								      (members ((type . "CHOICE")
										(members ((type . "SYMBOL")
											  (name . expression))
											 ((type . "SYMBOL")
											  (name . future_import_statement))
											 ((type . "SYMBOL")
											  (name . import_statement))
											 ((type . "SYMBOL")
											  (name . import_from_statement))
											 ((type . "SYMBOL")
											  (name . print_statement))
											 ((type . "SYMBOL")
											  (name . assert_statement))
											 ((type . "SYMBOL")
											  (name . comma_statement))
											 ((type . "SYMBOL")
											  (name . return_statement))
											 ((type . "SYMBOL")
											  (name . delete_statement))
											 ((type . "SYMBOL")
											  (name . raise_statement))
											 ((type . "SYMBOL")
											  (name . pass_statement))
											 ((type . "SYMBOL")
											  (name . break_statement))
											 ((type . "SYMBOL")
											  (name . continue_statement))
											 ((type . "SYMBOL")
											  (name . global_statement))
											 ((type . "SYMBOL")
											  (name . nonlocal_statement))
											 ((type . "SYMBOL")
											  (name . assignment))
											 ((type . "SYMBOL")
											  (name . augmented_assignment))
											 ((type . "SYMBOL")
											  (name . yield))
											 ((type . "SYMBOL")
											  (name . exec_statement))))
									       ((type . "REPEAT")
										(content (type . "SEQ")
											 (members ((type . "STRING")
												   (value . ";"))
												  ((type . "CHOICE")
												   (members ((type . "SYMBOL")
													     (name . expression))
													    ((type . "SYMBOL")
													     (name . future_import_statement))
													    ((type . "SYMBOL")
													     (name . import_statement))
													    ((type . "SYMBOL")
													     (name . import_from_statement))
													    ((type . "SYMBOL")
													     (name . print_statement))
													    ((type . "SYMBOL")
													     (name . assert_statement))
													    ((type . "SYMBOL")
													     (name . comma_statement))
													    ((type . "SYMBOL")
													     (name . return_statement))
													    ((type . "SYMBOL")
													     (name . delete_statement))
													    ((type . "SYMBOL")
													     (name . raise_statement))
													    ((type . "SYMBOL")
													     (name . pass_statement))
													    ((type . "SYMBOL")
													     (name . break_statement))
													    ((type . "SYMBOL")
													     (name . continue_statement))
													    ((type . "SYMBOL")
													     (name . global_statement))
													    ((type . "SYMBOL")
													     (name . nonlocal_statement))
													    ((type . "SYMBOL")
													     (name . assignment))
													    ((type . "SYMBOL")
													     (name . augmented_assignment))
													    ((type . "SYMBOL")
													     (name . yield))
													    ((type . "SYMBOL")
													     (name . exec_statement)))))))))
								     ((type . "CHOICE")
								      (members ((type . "STRING")
										(value . ";"))
									       ((type . "BLANK"))))
								     ((type . "SYMBOL")
								      (name . _newline))))
						   (named . t)
						   (value . block))
						  ((type . "SEQ")
						   (members ((type . "SYMBOL")
							     (name . _indent))
							    ((type . "SYMBOL")
							     (name . block))))
						  ((type . "ALIAS")
						   (content (type . "SYMBOL")
							    (name . _newline))
						   (named . t)
						   (value . block)))))))
 (parameters (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "("))
		      ((type . "CHOICE")
		       (members ((type . "SEQ")
				 (members ((type . "SEQ")
					   (members ((type . "SYMBOL")
						     (name . parameter))
						    ((type . "REPEAT")
						     (content (type . "SEQ")
							      (members ((type . "STRING")
									(value . ","))
								       ((type . "SYMBOL")
									(name . parameter)))))))
					  ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . ","))
						    ((type . "BLANK"))))))
				((type . "BLANK"))))
		      ((type . "STRING")
		       (value . ")"))))
 (lambda_parameters (type . "SEQ")
		    (members ((type . "SEQ")
			      (members ((type . "SYMBOL")
					(name . parameter))
				       ((type . "REPEAT")
					(content (type . "SEQ")
						 (members ((type . "STRING")
							   (value . ","))
							  ((type . "SYMBOL")
							   (name . parameter)))))))
			     ((type . "CHOICE")
			      (members ((type . "STRING")
					(value . ","))
				       ((type . "BLANK"))))))
 (list_splat (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "*"))
		      ((type . "SYMBOL")
		       (name . expression))))
 (dictionary_splat (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "**"))
			    ((type . "SYMBOL")
			     (name . expression))))
 (global_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "global"))
			    ((type . "SEQ")
			     (members ((type . "SYMBOL")
				       (name . identifier))
				      ((type . "REPEAT")
				       (content (type . "SEQ")
						(members ((type . "STRING")
							  (value . ","))
							 ((type . "SYMBOL")
							  (name . identifier)))))))))
 (nonlocal_statement (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "nonlocal"))
			      ((type . "SEQ")
			       (members ((type . "SYMBOL")
					 (name . identifier))
					((type . "REPEAT")
					 (content (type . "SEQ")
						  (members ((type . "STRING")
							    (value . ","))
							   ((type . "SYMBOL")
							    (name . identifier)))))))))
 (exec_statement (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "exec"))
			  ((type . "FIELD")
			   (name . "code")
			   (content (type . "SYMBOL") (name . string)))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "STRING")
					       (value . "in"))
					      ((type . "SEQ")
					       (members ((type . "SYMBOL")
							 (name . expression))
							((type . "REPEAT")
							 (content (type . "SEQ")
								  (members ((type . "STRING")
									    (value . ","))
									   ((type . "SYMBOL")
									    (name . expression)))))))))
				    ((type . "BLANK"))))))
 (class_definition (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "class"))
			    ((type . "FIELD")
			     (name . "name")
			     (content (type . "SYMBOL") (name . identifier)))
			    ((type . "FIELD")
			     (name . "superclasses")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . argument_list))
					       ((type . "BLANK")))))
			    ((type . "STRING")
			     (value . ":"))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "CHOICE")
				      (members ((type . "ALIAS")
						(content (type . "SEQ")
							 (members ((type . "SEQ")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . expression))
										      ((type . "SYMBOL")
										       (name . future_import_statement))
										      ((type . "SYMBOL")
										       (name . import_statement))
										      ((type . "SYMBOL")
										       (name . import_from_statement))
										      ((type . "SYMBOL")
										       (name . print_statement))
										      ((type . "SYMBOL")
										       (name . assert_statement))
										      ((type . "SYMBOL")
										       (name . comma_statement))
										      ((type . "SYMBOL")
										       (name . return_statement))
										      ((type . "SYMBOL")
										       (name . delete_statement))
										      ((type . "SYMBOL")
										       (name . raise_statement))
										      ((type . "SYMBOL")
										       (name . pass_statement))
										      ((type . "SYMBOL")
										       (name . break_statement))
										      ((type . "SYMBOL")
										       (name . continue_statement))
										      ((type . "SYMBOL")
										       (name . global_statement))
										      ((type . "SYMBOL")
										       (name . nonlocal_statement))
										      ((type . "SYMBOL")
										       (name . assignment))
										      ((type . "SYMBOL")
										       (name . augmented_assignment))
										      ((type . "SYMBOL")
										       (name . yield))
										      ((type . "SYMBOL")
										       (name . exec_statement))))
									    ((type . "REPEAT")
									     (content (type . "SEQ")
										      (members ((type . "STRING")
												(value . ";"))
											       ((type . "CHOICE")
												(members ((type . "SYMBOL")
													  (name . expression))
													 ((type . "SYMBOL")
													  (name . future_import_statement))
													 ((type . "SYMBOL")
													  (name . import_statement))
													 ((type . "SYMBOL")
													  (name . import_from_statement))
													 ((type . "SYMBOL")
													  (name . print_statement))
													 ((type . "SYMBOL")
													  (name . assert_statement))
													 ((type . "SYMBOL")
													  (name . comma_statement))
													 ((type . "SYMBOL")
													  (name . return_statement))
													 ((type . "SYMBOL")
													  (name . delete_statement))
													 ((type . "SYMBOL")
													  (name . raise_statement))
													 ((type . "SYMBOL")
													  (name . pass_statement))
													 ((type . "SYMBOL")
													  (name . break_statement))
													 ((type . "SYMBOL")
													  (name . continue_statement))
													 ((type . "SYMBOL")
													  (name . global_statement))
													 ((type . "SYMBOL")
													  (name . nonlocal_statement))
													 ((type . "SYMBOL")
													  (name . assignment))
													 ((type . "SYMBOL")
													  (name . augmented_assignment))
													 ((type . "SYMBOL")
													  (name . yield))
													 ((type . "SYMBOL")
													  (name . exec_statement)))))))))
								  ((type . "CHOICE")
								   (members ((type . "STRING")
									     (value . ";"))
									    ((type . "BLANK"))))
								  ((type . "SYMBOL")
								   (name . _newline))))
						(named . t)
						(value . block))
					       ((type . "SEQ")
						(members ((type . "SYMBOL")
							  (name . _indent))
							 ((type . "SYMBOL")
							  (name . block))))
					       ((type . "ALIAS")
						(content (type . "SYMBOL")
							 (name . _newline))
						(named . t)
						(value . block)))))))
 (parenthesized_list_splat (type . "PREC")
			   (value . 1)
			   (content (type . "SEQ")
				    (members ((type . "STRING")
					      (value . "("))
					     ((type . "CHOICE")
					      (members ((type . "ALIAS")
							(content (type . "SYMBOL")
								 (name . parenthesized_list_splat))
							(named . t)
							(value . parenthesized_expression))
						       ((type . "SYMBOL")
							(name . list_splat))))
					     ((type . "STRING")
					      (value . ")")))))
 (argument_list (type . "SEQ")
		(members ((type . "STRING")
			  (value . "("))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . expression))
						       ((type . "SYMBOL")
							(name . list_splat))
						       ((type . "SYMBOL")
							(name . dictionary_splat))
						       ((type . "ALIAS")
							(content (type . "SYMBOL")
								 (name . parenthesized_list_splat))
							(named . t)
							(value . parenthesized_expression))
						       ((type . "SYMBOL")
							(name . keyword_argument))))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "CHOICE")
								 (members ((type . "SYMBOL")
									   (name . expression))
									  ((type . "SYMBOL")
									   (name . list_splat))
									  ((type . "SYMBOL")
									   (name . dictionary_splat))
									  ((type . "ALIAS")
									   (content (type . "SYMBOL")
										    (name . parenthesized_list_splat))
									   (named . t)
									   (value . parenthesized_expression))
									  ((type . "SYMBOL")
									   (name . keyword_argument)))))))))
				   ((type . "BLANK"))))
			 ((type . "CHOICE")
			  (members ((type . "STRING")
				    (value . ","))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . ")"))))
 (decorated_definition (type . "SEQ")
		       (members ((type . "REPEAT1")
				 (content (type . "SYMBOL")
					  (name . decorator)))
				((type . "FIELD")
				 (name . "definition")
				 (content (type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . class_definition))
						   ((type . "SYMBOL")
						    (name . function_definition)))))))
 (decorator (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "@"))
		     ((type . "SYMBOL")
		      (name . primary_expression))
		     ((type . "SYMBOL")
		      (name . _newline))))
 (_suite (type . "CHOICE")
	 (members ((type . "ALIAS")
		   (content (type . "SEQ")
			    (members ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . expression))
							 ((type . "SYMBOL")
							  (name . future_import_statement))
							 ((type . "SYMBOL")
							  (name . import_statement))
							 ((type . "SYMBOL")
							  (name . import_from_statement))
							 ((type . "SYMBOL")
							  (name . print_statement))
							 ((type . "SYMBOL")
							  (name . assert_statement))
							 ((type . "SYMBOL")
							  (name . comma_statement))
							 ((type . "SYMBOL")
							  (name . return_statement))
							 ((type . "SYMBOL")
							  (name . delete_statement))
							 ((type . "SYMBOL")
							  (name . raise_statement))
							 ((type . "SYMBOL")
							  (name . pass_statement))
							 ((type . "SYMBOL")
							  (name . break_statement))
							 ((type . "SYMBOL")
							  (name . continue_statement))
							 ((type . "SYMBOL")
							  (name . global_statement))
							 ((type . "SYMBOL")
							  (name . nonlocal_statement))
							 ((type . "SYMBOL")
							  (name . assignment))
							 ((type . "SYMBOL")
							  (name . augmented_assignment))
							 ((type . "SYMBOL")
							  (name . yield))
							 ((type . "SYMBOL")
							  (name . exec_statement))))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "STRING")
								   (value . ";"))
								  ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . expression))
									    ((type . "SYMBOL")
									     (name . future_import_statement))
									    ((type . "SYMBOL")
									     (name . import_statement))
									    ((type . "SYMBOL")
									     (name . import_from_statement))
									    ((type . "SYMBOL")
									     (name . print_statement))
									    ((type . "SYMBOL")
									     (name . assert_statement))
									    ((type . "SYMBOL")
									     (name . comma_statement))
									    ((type . "SYMBOL")
									     (name . return_statement))
									    ((type . "SYMBOL")
									     (name . delete_statement))
									    ((type . "SYMBOL")
									     (name . raise_statement))
									    ((type . "SYMBOL")
									     (name . pass_statement))
									    ((type . "SYMBOL")
									     (name . break_statement))
									    ((type . "SYMBOL")
									     (name . continue_statement))
									    ((type . "SYMBOL")
									     (name . global_statement))
									    ((type . "SYMBOL")
									     (name . nonlocal_statement))
									    ((type . "SYMBOL")
									     (name . assignment))
									    ((type . "SYMBOL")
									     (name . augmented_assignment))
									    ((type . "SYMBOL")
									     (name . yield))
									    ((type . "SYMBOL")
									     (name . exec_statement)))))))))
				     ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . ";"))
					       ((type . "BLANK"))))
				     ((type . "SYMBOL")
				      (name . _newline))))
		   (named . t)
		   (value . block))
		  ((type . "SEQ")
		   (members ((type . "SYMBOL")
			     (name . _indent))
			    ((type . "SYMBOL")
			     (name . block))))
		  ((type . "ALIAS")
		   (content (type . "SYMBOL") (name . _newline))
		   (named . t)
		   (value . block))))
 (block (type . "SEQ")
	(members ((type . "REPEAT")
		  (content (type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "SEQ")
					       (members ((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . expression))
								  ((type . "SYMBOL")
								   (name . future_import_statement))
								  ((type . "SYMBOL")
								   (name . import_statement))
								  ((type . "SYMBOL")
								   (name . import_from_statement))
								  ((type . "SYMBOL")
								   (name . print_statement))
								  ((type . "SYMBOL")
								   (name . assert_statement))
								  ((type . "SYMBOL")
								   (name . comma_statement))
								  ((type . "SYMBOL")
								   (name . return_statement))
								  ((type . "SYMBOL")
								   (name . delete_statement))
								  ((type . "SYMBOL")
								   (name . raise_statement))
								  ((type . "SYMBOL")
								   (name . pass_statement))
								  ((type . "SYMBOL")
								   (name . break_statement))
								  ((type . "SYMBOL")
								   (name . continue_statement))
								  ((type . "SYMBOL")
								   (name . global_statement))
								  ((type . "SYMBOL")
								   (name . nonlocal_statement))
								  ((type . "SYMBOL")
								   (name . assignment))
								  ((type . "SYMBOL")
								   (name . augmented_assignment))
								  ((type . "SYMBOL")
								   (name . yield))
								  ((type . "SYMBOL")
								   (name . exec_statement))))
							((type . "REPEAT")
							 (content (type . "SEQ")
								  (members ((type . "STRING")
									    (value . ";"))
									   ((type . "CHOICE")
									    (members ((type . "SYMBOL")
										      (name . expression))
										     ((type . "SYMBOL")
										      (name . future_import_statement))
										     ((type . "SYMBOL")
										      (name . import_statement))
										     ((type . "SYMBOL")
										      (name . import_from_statement))
										     ((type . "SYMBOL")
										      (name . print_statement))
										     ((type . "SYMBOL")
										      (name . assert_statement))
										     ((type . "SYMBOL")
										      (name . comma_statement))
										     ((type . "SYMBOL")
										      (name . return_statement))
										     ((type . "SYMBOL")
										      (name . delete_statement))
										     ((type . "SYMBOL")
										      (name . raise_statement))
										     ((type . "SYMBOL")
										      (name . pass_statement))
										     ((type . "SYMBOL")
										      (name . break_statement))
										     ((type . "SYMBOL")
										      (name . continue_statement))
										     ((type . "SYMBOL")
										      (name . global_statement))
										     ((type . "SYMBOL")
										      (name . nonlocal_statement))
										     ((type . "SYMBOL")
										      (name . assignment))
										     ((type . "SYMBOL")
										      (name . augmented_assignment))
										     ((type . "SYMBOL")
										      (name . yield))
										     ((type . "SYMBOL")
										      (name . exec_statement)))))))))
					      ((type . "CHOICE")
					       (members ((type . "STRING")
							 (value . ";"))
							((type . "BLANK"))))
					      ((type . "SYMBOL")
					       (name . _newline))))
				    ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . if_statement))
					      ((type . "SYMBOL")
					       (name . for_statement))
					      ((type . "SYMBOL")
					       (name . while_statement))
					      ((type . "SYMBOL")
					       (name . try_statement))
					      ((type . "SYMBOL")
					       (name . with_statement))
					      ((type . "SYMBOL")
					       (name . function_definition))
					      ((type . "SYMBOL")
					       (name . class_definition))
					      ((type . "SYMBOL")
					       (name . decorated_definition))
					      ((type . "SYMBOL")
					       (name . match_statement)))))))
		 ((type . "SYMBOL")
		  (name . _dedent))))
 (expression_list (type . "PREC_RIGHT")
		  (value . 0)
		  (content (type . "SEQ")
			   (members ((type . "SYMBOL")
				     (name . expression))
				    ((type . "CHOICE")
				     (members ((type . "STRING")
					       (value . ","))
					      ((type . "SEQ")
					       (members ((type . "REPEAT1")
							 (content (type . "SEQ")
								  (members ((type . "STRING")
									    (value . ","))
									   ((type . "SYMBOL")
									    (name . expression)))))
							((type . "CHOICE")
							 (members ((type . "STRING")
								   (value . ","))
								  ((type . "BLANK")))))))))))
 (_dotted_name (type . "SEQ")
	       (members ((type . "SYMBOL")
			 (name . identifier))
			((type . "REPEAT")
			 (content (type . "SEQ")
				  (members ((type . "STRING")
					    (value . "."))
					   ((type . "SYMBOL")
					    (name . identifier)))))))
 (_parameters (type . "SEQ")
	      (members ((type . "SEQ")
			(members ((type . "SYMBOL")
				  (name . parameter))
				 ((type . "REPEAT")
				  (content (type . "SEQ")
					   (members ((type . "STRING")
						     (value . ","))
						    ((type . "SYMBOL")
						     (name . parameter)))))))
		       ((type . "CHOICE")
			(members ((type . "STRING")
				  (value . ","))
				 ((type . "BLANK"))))))
 (_patterns (type . "SEQ")
	    (members ((type . "SEQ")
		      (members ((type . "SYMBOL")
				(name . pattern))
			       ((type . "REPEAT")
				(content (type . "SEQ")
					 (members ((type . "STRING")
						   (value . ","))
						  ((type . "SYMBOL")
						   (name . pattern)))))))
		     ((type . "CHOICE")
		      (members ((type . "STRING")
				(value . ","))
			       ((type . "BLANK"))))))
 (parameter (type . "CHOICE")
	    (members ((type . "SYMBOL")
		      (name . identifier))
		     ((type . "SYMBOL")
		      (name . typed_parameter))
		     ((type . "SYMBOL")
		      (name . default_parameter))
		     ((type . "SYMBOL")
		      (name . list_splat_pattern))
		     ((type . "SYMBOL")
		      (name . tuple_pattern))
		     ((type . "SYMBOL")
		      (name . keyword_separator))
		     ((type . "SYMBOL")
		      (name . positional_separator))
		     ((type . "SYMBOL")
		      (name . dictionary_splat_pattern))))
 (pattern (type . "CHOICE")
	  (members ((type . "SYMBOL")
		    (name . identifier))
		   ((type . "ALIAS")
		    (content (type . "STRING") (value . "match"))
		    (named . t)
		    (value . identifier))
		   ((type . "SYMBOL")
		    (name . keyword_identifier))
		   ((type . "SYMBOL")
		    (name . subscript))
		   ((type . "SYMBOL")
		    (name . attribute))
		   ((type . "SYMBOL")
		    (name . list_splat_pattern))
		   ((type . "SYMBOL")
		    (name . tuple_pattern))
		   ((type . "SYMBOL")
		    (name . list_pattern))))
 (tuple_pattern (type . "SEQ")
		(members ((type . "STRING")
			  (value . "("))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "SEQ")
					      (members ((type . "SYMBOL")
							(name . pattern))
						       ((type . "REPEAT")
							(content (type . "SEQ")
								 (members ((type . "STRING")
									   (value . ","))
									  ((type . "SYMBOL")
									   (name . pattern)))))))
					     ((type . "CHOICE")
					      (members ((type . "STRING")
							(value . ","))
						       ((type . "BLANK"))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . ")"))))
 (list_pattern (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "["))
			((type . "CHOICE")
			 (members ((type . "SEQ")
				   (members ((type . "SEQ")
					     (members ((type . "SYMBOL")
						       (name . pattern))
						      ((type . "REPEAT")
						       (content (type . "SEQ")
								(members ((type . "STRING")
									  (value . ","))
									 ((type . "SYMBOL")
									  (name . pattern)))))))
					    ((type . "CHOICE")
					     (members ((type . "STRING")
						       (value . ","))
						      ((type . "BLANK"))))))
				  ((type . "BLANK"))))
			((type . "STRING")
			 (value . "]"))))
 (default_parameter (type . "SEQ")
   (members ((type . "FIELD")
	     (name . "name")
	     (content (type . "CHOICE")
		      (members ((type . "SYMBOL")
				(name . identifier))
			       ((type . "SYMBOL")
				(name . typed_parameter)))))
	    ((type . "STRING")
	     (value . "="))
	    ((type . "FIELD")
	     (name . "value")
	     (content (type . "SYMBOL") (name . expression)))))
 (list_splat_pattern (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "*"))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . identifier))
					((type . "SYMBOL")
					 (name . keyword_identifier))
					((type . "SYMBOL")
					 (name . subscript))
					((type . "SYMBOL")
					 (name . attribute))))))
 (dictionary_splat_pattern (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "**"))
				    ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . identifier))
					      ((type . "SYMBOL")
					       (name . keyword_identifier))
					      ((type . "SYMBOL")
					       (name . subscript))
					      ((type . "SYMBOL")
					       (name . attribute))))))
 (as_pattern (type . "PREC_LEFT")
	     (value . 0)
	     (content (type . "SEQ")
		      (members ((type . "SYMBOL")
				(name . expression))
			       ((type . "STRING")
				(value . "as"))
			       ((type . "FIELD")
				(name . "alias")
				(content (type . "ALIAS")
					 (content (type . "SYMBOL")
						  (name . expression))
					 (named . t)
					 (value . as_pattern_target))))))
 (_expression_within_for_in_clause (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . expression))
					    ((type . "ALIAS")
					     (content (type . "SYMBOL")
						      (name . lambda_within_for_in_clause))
					     (named . t)
					     (value . lambda))))
 (expression (type . "CHOICE")
	     (members ((type . "SYMBOL")
		       (name . comparison_operator))
		      ((type . "SYMBOL")
		       (name . not_operator))
		      ((type . "SYMBOL")
		       (name . boolean_operator))
		      ((type . "SYMBOL")
		       (name . await))
		      ((type . "SYMBOL")
		       (name . lambda))
		      ((type . "SYMBOL")
		       (name . primary_expression))
		      ((type . "SYMBOL")
		       (name . conditional_expression))
		      ((type . "SYMBOL")
		       (name . named_expression))
		      ((type . "SYMBOL")
		       (name . as_pattern))))
 (primary_expression (type . "CHOICE")
		     (members ((type . "SYMBOL")
			       (name . binary_operator))
			      ((type . "SYMBOL")
			       (name . identifier))
			      ((type . "ALIAS")
			       (content (type . "STRING") (value . "match"))
			       (named . t)
			       (value . identifier))
			      ((type . "SYMBOL")
			       (name . keyword_identifier))
			      ((type . "SYMBOL")
			       (name . string))
			      ((type . "SYMBOL")
			       (name . concatenated_string))
			      ((type . "SYMBOL")
			       (name . integer))
			      ((type . "SYMBOL")
			       (name . float))
			      ((type . "SYMBOL")
			       (name . true))
			      ((type . "SYMBOL")
			       (name . false))
			      ((type . "SYMBOL")
			       (name . none))
			      ((type . "SYMBOL")
			       (name . unary_operator))
			      ((type . "SYMBOL")
			       (name . attribute))
			      ((type . "SYMBOL")
			       (name . subscript))
			      ((type . "SYMBOL")
			       (name . call))
			      ((type . "SYMBOL")
			       (name . list))
			      ((type . "SYMBOL")
			       (name . list_comprehension))
			      ((type . "SYMBOL")
			       (name . dictionary))
			      ((type . "SYMBOL")
			       (name . dictionary_comprehension))
			      ((type . "SYMBOL")
			       (name . set))
			      ((type . "SYMBOL")
			       (name . set_comprehension))
			      ((type . "SYMBOL")
			       (name . tuple))
			      ((type . "SYMBOL")
			       (name . parenthesized_expression))
			      ((type . "SYMBOL")
			       (name . generator_expression))
			      ((type . "SYMBOL")
			       (name . ellipsis))))
 (not_operator (type . "PREC")
	       (value . 1)
	       (content (type . "SEQ")
			(members ((type . "STRING")
				  (value . "not"))
				 ((type . "FIELD")
				  (name . "argument")
				  (content (type . "SYMBOL")
					   (name . expression))))))
 (boolean_operator (type . "CHOICE")
		   (members ((type . "PREC_LEFT")
			     (value . 11)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "left")
						(content (type . "SYMBOL")
							 (name . expression)))
					       ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "and")))
					       ((type . "FIELD")
						(name . "right")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . 10)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "left")
						(content (type . "SYMBOL")
							 (name . expression)))
					       ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "or")))
					       ((type . "FIELD")
						(name . "right")
						(content (type . "SYMBOL")
							 (name . expression))))))))
 (binary_operator (type . "CHOICE")
		  (members ((type . "PREC_LEFT")
			    (value . 16)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "+")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 16)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "-")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 17)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "*")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 17)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "@")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 17)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "/")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 17)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "%")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 17)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "//")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_RIGHT")
			    (value . 19)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "**")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 12)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "|")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 13)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "&")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 14)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "^")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 15)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . "<<")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))
			   ((type . "PREC_LEFT")
			    (value . 15)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "left")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "FIELD")
					       (name . "operator")
					       (content (type . "STRING")
							(value . ">>")))
					      ((type . "FIELD")
					       (name . "right")
					       (content (type . "SYMBOL")
							(name . primary_expression))))))))
 (unary_operator (type . "PREC")
		 (value . 18)
		 (content (type . "SEQ")
			  (members ((type . "FIELD")
				    (name . "operator")
				    (content (type . "CHOICE")
					     (members ((type . "STRING")
						       (value . "+"))
						      ((type . "STRING")
						       (value . "-"))
						      ((type . "STRING")
						       (value . "~")))))
				   ((type . "FIELD")
				    (name . "argument")
				    (content (type . "SYMBOL")
					     (name . primary_expression))))))
 (comparison_operator (type . "PREC_LEFT")
		      (value . 2)
		      (content (type . "SEQ")
			       (members ((type . "SYMBOL")
					 (name . primary_expression))
					((type . "REPEAT1")
					 (content (type . "SEQ")
						  (members ((type . "FIELD")
							    (name . "operators")
							    (content (type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "<"))
									      ((type . "STRING")
									       (value . "<="))
									      ((type . "STRING")
									       (value . "=="))
									      ((type . "STRING")
									       (value . "!="))
									      ((type . "STRING")
									       (value . ">="))
									      ((type . "STRING")
									       (value . ">"))
									      ((type . "STRING")
									       (value . "<>"))
									      ((type . "STRING")
									       (value . "in"))
									      ((type . "SEQ")
									       (members ((type . "STRING")
											 (value . "not"))
											((type . "STRING")
											 (value . "in"))))
									      ((type . "STRING")
									       (value . "is"))
									      ((type . "SEQ")
									       (members ((type . "STRING")
											 (value . "is"))
											((type . "STRING")
											 (value . "not")))))))
							   ((type . "SYMBOL")
							    (name . primary_expression))))))))
 (lambda (type . "PREC")
   (value . -2)
   (content (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "lambda"))
		     ((type . "FIELD")
		      (name . "parameters")
		      (content (type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . lambda_parameters))
					((type . "BLANK")))))
		     ((type . "STRING")
		      (value . ":"))
		     ((type . "FIELD")
		      (name . "body")
		      (content (type . "SYMBOL") (name . expression))))))
 (lambda_within_for_in_clause (type . "SEQ")
			      (members ((type . "STRING")
					(value . "lambda"))
				       ((type . "FIELD")
					(name . "parameters")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . lambda_parameters))
							  ((type . "BLANK")))))
				       ((type . "STRING")
					(value . ":"))
				       ((type . "FIELD")
					(name . "body")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . expression))
							  ((type . "ALIAS")
							   (content (type . "SYMBOL")
								    (name . lambda_within_for_in_clause))
							   (named . t)
							   (value . lambda)))))))
 (assignment (type . "SEQ")
	     (members ((type . "FIELD")
		       (name . "left")
		       (content (type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . pattern))
					 ((type . "SYMBOL")
					  (name . pattern_list)))))
		      ((type . "CHOICE")
		       (members ((type . "SEQ")
				 (members ((type . "STRING")
					   (value . "="))
					  ((type . "FIELD")
					   (name . "right")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . expression))
							     ((type . "SYMBOL")
							      (name . expression_list))
							     ((type . "SYMBOL")
							      (name . assignment))
							     ((type . "SYMBOL")
							      (name . augmented_assignment))
							     ((type . "SYMBOL")
							      (name . yield)))))))
				((type . "SEQ")
				 (members ((type . "STRING")
					   (value . ":"))
					  ((type . "FIELD")
					   (name . "type")
					   (content (type . "SYMBOL")
						    (name . expression)))))
				((type . "SEQ")
				 (members ((type . "STRING")
					   (value . ":"))
					  ((type . "FIELD")
					   (name . "type")
					   (content (type . "SYMBOL")
						    (name . expression)))
					  ((type . "STRING")
					   (value . "="))
					  ((type . "FIELD")
					   (name . "right")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . expression))
							     ((type . "SYMBOL")
							      (name . expression_list))
							     ((type . "SYMBOL")
							      (name . assignment))
							     ((type . "SYMBOL")
							      (name . augmented_assignment))
							     ((type . "SYMBOL")
							      (name . yield)))))))))))
 (augmented_assignment (type . "SEQ")
		       (members ((type . "FIELD")
				 (name . "left")
				 (content (type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . pattern))
						   ((type . "SYMBOL")
						    (name . pattern_list)))))
				((type . "FIELD")
				 (name . "operator")
				 (content (type . "CHOICE")
					  (members ((type . "STRING")
						    (value . "+="))
						   ((type . "STRING")
						    (value . "-="))
						   ((type . "STRING")
						    (value . "*="))
						   ((type . "STRING")
						    (value . "/="))
						   ((type . "STRING")
						    (value . "@="))
						   ((type . "STRING")
						    (value . "//="))
						   ((type . "STRING")
						    (value . "%="))
						   ((type . "STRING")
						    (value . "**="))
						   ((type . "STRING")
						    (value . ">>="))
						   ((type . "STRING")
						    (value . "<<="))
						   ((type . "STRING")
						    (value . "&="))
						   ((type . "STRING")
						    (value . "^="))
						   ((type . "STRING")
						    (value . "|=")))))
				((type . "FIELD")
				 (name . "right")
				 (content (type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . expression))
						   ((type . "SYMBOL")
						    (name . expression_list))
						   ((type . "SYMBOL")
						    (name . assignment))
						   ((type . "SYMBOL")
						    (name . augmented_assignment))
						   ((type . "SYMBOL")
						    (name . yield)))))))
 (_left_hand_side (type . "CHOICE")
		  (members ((type . "SYMBOL")
			    (name . pattern))
			   ((type . "SYMBOL")
			    (name . pattern_list))))
 (pattern_list (type . "SEQ")
	       (members ((type . "SYMBOL")
			 (name . pattern))
			((type . "CHOICE")
			 (members ((type . "STRING")
				   (value . ","))
				  ((type . "SEQ")
				   (members ((type . "REPEAT1")
					     (content (type . "SEQ")
						      (members ((type . "STRING")
								(value . ","))
							       ((type . "SYMBOL")
								(name . pattern)))))
					    ((type . "CHOICE")
					     (members ((type . "STRING")
						       (value . ","))
						      ((type . "BLANK"))))))))))
 (_right_hand_side (type . "CHOICE")
		   (members ((type . "SYMBOL")
			     (name . expression))
			    ((type . "SYMBOL")
			     (name . expression_list))
			    ((type . "SYMBOL")
			     (name . assignment))
			    ((type . "SYMBOL")
			     (name . augmented_assignment))
			    ((type . "SYMBOL")
			     (name . yield))))
 (yield (type . "PREC_RIGHT")
	(value . 0)
	(content (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "yield"))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "STRING")
					       (value . "from"))
					      ((type . "SYMBOL")
					       (name . expression))))
				    ((type . "CHOICE")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . expression))
							((type . "SYMBOL")
							 (name . expression_list))))
					      ((type . "BLANK")))))))))
 (attribute (type . "PREC")
	    (value . 20)
	    (content (type . "SEQ")
		     (members ((type . "FIELD")
			       (name . "object")
			       (content (type . "SYMBOL")
					(name . primary_expression)))
			      ((type . "STRING")
			       (value . "."))
			      ((type . "FIELD")
			       (name . "attribute")
			       (content (type . "SYMBOL")
					(name . identifier))))))
 (subscript (type . "PREC")
	    (value . 20)
	    (content (type . "SEQ")
		     (members ((type . "FIELD")
			       (name . "value")
			       (content (type . "SYMBOL")
					(name . primary_expression)))
			      ((type . "STRING")
			       (value . "["))
			      ((type . "SEQ")
			       (members ((type . "FIELD")
					 (name . "subscript")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . expression))
							   ((type . "SYMBOL")
							    (name . slice)))))
					((type . "REPEAT")
					 (content (type . "SEQ")
						  (members ((type . "STRING")
							    (value . ","))
							   ((type . "FIELD")
							    (name . "subscript")
							    (content (type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . expression))
									      ((type . "SYMBOL")
									       (name . slice))))))))))
			      ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . ","))
					((type . "BLANK"))))
			      ((type . "STRING")
			       (value . "]")))))
 (slice (type . "SEQ")
	(members ((type . "CHOICE")
		  (members ((type . "SYMBOL")
			    (name . expression))
			   ((type . "BLANK"))))
		 ((type . "STRING")
		  (value . ":"))
		 ((type . "CHOICE")
		  (members ((type . "SYMBOL")
			    (name . expression))
			   ((type . "BLANK"))))
		 ((type . "CHOICE")
		  (members ((type . "SEQ")
			    (members ((type . "STRING")
				      (value . ":"))
				     ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . expression))
					       ((type . "BLANK"))))))
			   ((type . "BLANK"))))))
 (ellipsis (type . "STRING") (value . "..."))
 (call (type . "PREC")
       (value . 20)
       (content (type . "SEQ")
		(members ((type . "FIELD")
			  (name . "function")
			  (content (type . "SYMBOL")
				   (name . primary_expression)))
			 ((type . "FIELD")
			  (name . "arguments")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . generator_expression))
					    ((type . "SYMBOL")
					     (name . argument_list))))))))
 (typed_parameter (type . "PREC")
		  (value . -1)
		  (content (type . "SEQ")
			   (members ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . identifier))
					      ((type . "SYMBOL")
					       (name . list_splat_pattern))
					      ((type . "SYMBOL")
					       (name . dictionary_splat_pattern))))
				    ((type . "STRING")
				     (value . ":"))
				    ((type . "FIELD")
				     (name . "type")
				     (content (type . "SYMBOL")
					      (name . expression))))))
 (keyword_argument (type . "SEQ")
		   (members ((type . "FIELD")
			     (name . "name")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . identifier))
					       ((type . "SYMBOL")
						(name . keyword_identifier))
					       ((type . "ALIAS")
						(content (type . "STRING")
							 (value . "match"))
						(named . t)
						(value . identifier)))))
			    ((type . "STRING")
			     (value . "="))
			    ((type . "FIELD")
			     (name . "value")
			     (content (type . "SYMBOL") (name . expression)))))
 (list (type . "SEQ")
       (members ((type . "STRING")
		 (value . "["))
		((type . "CHOICE")
		 (members ((type . "SEQ")
			   (members ((type . "SEQ")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . expression))
							((type . "SYMBOL")
							 (name . yield))
							((type . "SYMBOL")
							 (name . list_splat))
							((type . "SYMBOL")
							 (name . parenthesized_list_splat))))
					      ((type . "REPEAT")
					       (content (type . "SEQ")
							(members ((type . "STRING")
								  (value . ","))
								 ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . expression))
									   ((type . "SYMBOL")
									    (name . yield))
									   ((type . "SYMBOL")
									    (name . list_splat))
									   ((type . "SYMBOL")
									    (name . parenthesized_list_splat)))))))))
				    ((type . "CHOICE")
				     (members ((type . "STRING")
					       (value . ","))
					      ((type . "BLANK"))))))
			  ((type . "BLANK"))))
		((type . "STRING")
		 (value . "]"))))
 (set (type . "SEQ")
      (members ((type . "STRING")
		(value . "{"))
	       ((type . "SEQ")
		(members ((type . "SEQ")
			  (members ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . expression))
					     ((type . "SYMBOL")
					      (name . yield))
					     ((type . "SYMBOL")
					      (name . list_splat))
					     ((type . "SYMBOL")
					      (name . parenthesized_list_splat))))
				   ((type . "REPEAT")
				    (content (type . "SEQ")
					     (members ((type . "STRING")
						       (value . ","))
						      ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . expression))
								((type . "SYMBOL")
								 (name . yield))
								((type . "SYMBOL")
								 (name . list_splat))
								((type . "SYMBOL")
								 (name . parenthesized_list_splat)))))))))
			 ((type . "CHOICE")
			  (members ((type . "STRING")
				    (value . ","))
				   ((type . "BLANK"))))))
	       ((type . "STRING")
		(value . "}"))))
 (tuple (type . "SEQ")
	(members ((type . "STRING")
		  (value . "("))
		 ((type . "CHOICE")
		  (members ((type . "SEQ")
			    (members ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . expression))
							 ((type . "SYMBOL")
							  (name . yield))
							 ((type . "SYMBOL")
							  (name . list_splat))
							 ((type . "SYMBOL")
							  (name . parenthesized_list_splat))))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "STRING")
								   (value . ","))
								  ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . expression))
									    ((type . "SYMBOL")
									     (name . yield))
									    ((type . "SYMBOL")
									     (name . list_splat))
									    ((type . "SYMBOL")
									     (name . parenthesized_list_splat)))))))))
				     ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . ","))
					       ((type . "BLANK"))))))
			   ((type . "BLANK"))))
		 ((type . "STRING")
		  (value . ")"))))
 (dictionary (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "{"))
		      ((type . "CHOICE")
		       (members ((type . "SEQ")
				 (members ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . pair))
						    ((type . "SYMBOL")
						     (name . dictionary_splat))))
					  ((type . "REPEAT")
					   (content (type . "SEQ")
						    (members ((type . "STRING")
							      (value . ","))
							     ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . pair))
								       ((type . "SYMBOL")
									(name . dictionary_splat)))))))))
				((type . "BLANK"))))
		      ((type . "CHOICE")
		       (members ((type . "STRING")
				 (value . ","))
				((type . "BLANK"))))
		      ((type . "STRING")
		       (value . "}"))))
 (pair (type . "SEQ")
       (members ((type . "FIELD")
		 (name . "key")
		 (content (type . "SYMBOL") (name . expression)))
		((type . "STRING")
		 (value . ":"))
		((type . "FIELD")
		 (name . "value")
		 (content (type . "SYMBOL") (name . expression)))))
 (list_comprehension (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "["))
			      ((type . "FIELD")
			       (name . "body")
			       (content (type . "SYMBOL")
					(name . expression)))
			      ((type . "SEQ")
			       (members ((type . "SYMBOL")
					 (name . for_in_clause))
					((type . "REPEAT")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . for_in_clause))
							   ((type . "SEQ")
							    (members ((type . "STRING")
								      (value . "if"))
								     ((type . "SYMBOL")
								      (name . expression)))))))))
			      ((type . "STRING")
			       (value . "]"))))
 (dictionary_comprehension (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "{"))
				    ((type . "FIELD")
				     (name . "body")
				     (content (type . "SYMBOL")
					      (name . pair)))
				    ((type . "SEQ")
				     (members ((type . "SYMBOL")
					       (name . for_in_clause))
					      ((type . "REPEAT")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . for_in_clause))
								 ((type . "SEQ")
								  (members ((type . "STRING")
									    (value . "if"))
									   ((type . "SYMBOL")
									    (name . expression)))))))))
				    ((type . "STRING")
				     (value . "}"))))
 (set_comprehension (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "{"))
			     ((type . "FIELD")
			      (name . "body")
			      (content (type . "SYMBOL") (name . expression)))
			     ((type . "SEQ")
			      (members ((type . "SYMBOL")
					(name . for_in_clause))
				       ((type . "REPEAT")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . for_in_clause))
							  ((type . "SEQ")
							   (members ((type . "STRING")
								     (value . "if"))
								    ((type . "SYMBOL")
								     (name . expression)))))))))
			     ((type . "STRING")
			      (value . "}"))))
 (generator_expression (type . "SEQ")
		       (members ((type . "STRING")
				 (value . "("))
				((type . "FIELD")
				 (name . "body")
				 (content (type . "SYMBOL")
					  (name . expression)))
				((type . "SEQ")
				 (members ((type . "SYMBOL")
					   (name . for_in_clause))
					  ((type . "REPEAT")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . for_in_clause))
							     ((type . "SEQ")
							      (members ((type . "STRING")
									(value . "if"))
								       ((type . "SYMBOL")
									(name . expression)))))))))
				((type . "STRING")
				 (value . ")"))))
 (_comprehension_clauses (type . "SEQ")
			 (members ((type . "SYMBOL")
				   (name . for_in_clause))
				  ((type . "REPEAT")
				   (content (type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . for_in_clause))
						     ((type . "SEQ")
						      (members ((type . "STRING")
								(value . "if"))
							       ((type . "SYMBOL")
								(name . expression)))))))))
 (parenthesized_expression (type . "PREC")
			   (value . 1)
			   (content (type . "SEQ")
				    (members ((type . "STRING")
					      (value . "("))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . expression))
						       ((type . "SYMBOL")
							(name . yield))))
					     ((type . "STRING")
					      (value . ")")))))
 (_collection_elements (type . "SEQ")
		       (members ((type . "SEQ")
				 (members ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . expression))
						    ((type . "SYMBOL")
						     (name . yield))
						    ((type . "SYMBOL")
						     (name . list_splat))
						    ((type . "SYMBOL")
						     (name . parenthesized_list_splat))))
					  ((type . "REPEAT")
					   (content (type . "SEQ")
						    (members ((type . "STRING")
							      (value . ","))
							     ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . expression))
								       ((type . "SYMBOL")
									(name . yield))
								       ((type . "SYMBOL")
									(name . list_splat))
								       ((type . "SYMBOL")
									(name . parenthesized_list_splat)))))))))
				((type . "CHOICE")
				 (members ((type . "STRING")
					   (value . ","))
					  ((type . "BLANK"))))))
 (for_in_clause (type . "PREC_LEFT")
		(value . 0)
		(content (type . "SEQ")
			 (members ((type . "CHOICE")
				   (members ((type . "STRING")
					     (value . "async"))
					    ((type . "BLANK"))))
				  ((type . "STRING")
				   (value . "for"))
				  ((type . "FIELD")
				   (name . "left")
				   (content (type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . pattern))
						     ((type . "SYMBOL")
						      (name . pattern_list)))))
				  ((type . "STRING")
				   (value . "in"))
				  ((type . "FIELD")
				   (name . "right")
				   (content (type . "SEQ")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . expression))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . lambda_within_for_in_clause))
								(named . t)
								(value . lambda))))
						     ((type . "REPEAT")
						      (content (type . "SEQ")
							       (members ((type . "STRING")
									 (value . ","))
									((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . expression))
										  ((type . "ALIAS")
										   (content (type . "SYMBOL")
											    (name . lambda_within_for_in_clause))
										   (named . t)
										   (value . lambda))))))))))
				  ((type . "CHOICE")
				   (members ((type . "STRING")
					     (value . ","))
					    ((type . "BLANK")))))))
 (conditional_expression (type . "PREC_RIGHT")
			 (value . -1)
			 (content (type . "SEQ")
				  (members ((type . "SYMBOL")
					    (name . expression))
					   ((type . "STRING")
					    (value . "if"))
					   ((type . "SYMBOL")
					    (name . expression))
					   ((type . "STRING")
					    (value . "else"))
					   ((type . "SYMBOL")
					    (name . expression)))))
 (concatenated_string (type . "SEQ")
		      (members ((type . "SYMBOL")
				(name . string))
			       ((type . "REPEAT1")
				(content (type . "SYMBOL") (name . string)))))
 (string (type . "SEQ")
	 (members ((type . "ALIAS")
		   (content (type . "SYMBOL") (name . _string_start))
		   (named . :json-false)
		   (value . \"))
		  ((type . "REPEAT")
		   (content (type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . interpolation))
				     ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . "{{"))
					       ((type . "STRING")
						(value . "}}"))))
				     ((type . "SYMBOL")
				      (name . escape_sequence))
				     ((type . "STRING")
				      (value . "\\"))
				     ((type . "SYMBOL")
				      (name . _string_content)))))
		  ((type . "ALIAS")
		   (content (type . "SYMBOL") (name . _string_end))
		   (named . :json-false)
		   (value . \"))))
 (interpolation (type . "SEQ")
		(members ((type . "STRING")
			  (value . "{"))
			 ((type . "SYMBOL")
			  (name . expression))
			 ((type . "CHOICE")
			  (members ((type . "STRING")
				    (value . "="))
				   ((type . "BLANK"))))
			 ((type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . type_conversion))
				   ((type . "BLANK"))))
			 ((type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . format_specifier))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . "}"))))
 (_escape_interpolation (type . "CHOICE")
			(members ((type . "STRING")
				  (value . "{{"))
				 ((type . "STRING")
				  (value . "}}"))))
 (escape_sequence (type . "TOKEN")
		  (content (type . "PREC")
			   (value . 1)
			   (content (type . "SEQ")
				    (members ((type . "STRING")
					      (value . "\\"))
					     ((type . "CHOICE")
					      (members ((type . "PATTERN")
							(value . "u[a-fA-F\\d]{4}"))
						       ((type . "PATTERN")
							(value . "U[a-fA-F\\d]{8}"))
						       ((type . "PATTERN")
							(value . "x[a-fA-F\\d]{2}"))
						       ((type . "PATTERN")
							(value . "\\d{3}"))
						       ((type . "PATTERN")
							(value . "\\r?\\n"))
						       ((type . "PATTERN")
							(value . "['\"abfrntv\\\\]"))))))))
 (_not_escape_sequence (type . "STRING") (value . "\\"))
 (format_specifier (type . "SEQ")
		   (members ((type . "STRING")
			     (value . ":"))
			    ((type . "REPEAT")
			     (content (type . "CHOICE")
				      (members ((type . "TOKEN")
						(content (type . "PREC")
							 (value . 1)
							 (content (type . "PATTERN")
								  (value . "[^{}\\n]+"))))
					       ((type . "SYMBOL")
						(name . format_expression)))))))
 (format_expression (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "{"))
			     ((type . "SYMBOL")
			      (name . expression))
			     ((type . "STRING")
			      (value . "}"))))
 (type_conversion (type . "PATTERN") (value . "![a-z]"))
 (integer (type . "TOKEN")
	  (content (type . "CHOICE")
		   (members ((type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "0x"))
						((type . "STRING")
						 (value . "0X"))))
				      ((type . "REPEAT1")
				       (content (type . "PATTERN")
						(value . "_?[A-Fa-f0-9]+")))
				      ((type . "CHOICE")
				       (members ((type . "PATTERN")
						 (value . "[Ll]"))
						((type . "BLANK"))))))
			    ((type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "0o"))
						((type . "STRING")
						 (value . "0O"))))
				      ((type . "REPEAT1")
				       (content (type . "PATTERN")
						(value . "_?[0-7]+")))
				      ((type . "CHOICE")
				       (members ((type . "PATTERN")
						 (value . "[Ll]"))
						((type . "BLANK"))))))
			    ((type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "0b"))
						((type . "STRING")
						 (value . "0B"))))
				      ((type . "REPEAT1")
				       (content (type . "PATTERN")
						(value . "_?[0-1]+")))
				      ((type . "CHOICE")
				       (members ((type . "PATTERN")
						 (value . "[Ll]"))
						((type . "BLANK"))))))
			    ((type . "SEQ")
			     (members ((type . "REPEAT1")
				       (content (type . "PATTERN")
						(value . "[0-9]+_?")))
				      ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "PATTERN")
							   (value . "[Ll]"))
							  ((type . "BLANK"))))
						((type . "CHOICE")
						 (members ((type . "PATTERN")
							   (value . "[jJ]"))
							  ((type . "BLANK")))))))))))
 (float (type . "TOKEN")
	(content (type . "SEQ")
		 (members ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "REPEAT1")
					       (content (type . "PATTERN")
							(value . "[0-9]+_?")))
					      ((type . "STRING")
					       (value . "."))
					      ((type . "CHOICE")
					       (members ((type . "REPEAT1")
							 (content (type . "PATTERN")
								  (value . "[0-9]+_?")))
							((type . "BLANK"))))
					      ((type . "CHOICE")
					       (members ((type . "SEQ")
							 (members ((type . "PATTERN")
								   (value . "[eE][\\+-]?"))
								  ((type . "REPEAT1")
								   (content (type . "PATTERN")
									    (value . "[0-9]+_?")))))
							((type . "BLANK"))))))
				    ((type . "SEQ")
				     (members ((type . "CHOICE")
					       (members ((type . "REPEAT1")
							 (content (type . "PATTERN")
								  (value . "[0-9]+_?")))
							((type . "BLANK"))))
					      ((type . "STRING")
					       (value . "."))
					      ((type . "REPEAT1")
					       (content (type . "PATTERN")
							(value . "[0-9]+_?")))
					      ((type . "CHOICE")
					       (members ((type . "SEQ")
							 (members ((type . "PATTERN")
								   (value . "[eE][\\+-]?"))
								  ((type . "REPEAT1")
								   (content (type . "PATTERN")
									    (value . "[0-9]+_?")))))
							((type . "BLANK"))))))
				    ((type . "SEQ")
				     (members ((type . "REPEAT1")
					       (content (type . "PATTERN")
							(value . "[0-9]+_?")))
					      ((type . "SEQ")
					       (members ((type . "PATTERN")
							 (value . "[eE][\\+-]?"))
							((type . "REPEAT1")
							 (content (type . "PATTERN")
								  (value . "[0-9]+_?")))))))))
			  ((type . "CHOICE")
			   (members ((type . "CHOICE")
				     (members ((type . "PATTERN")
					       (value . "[Ll]"))
					      ((type . "PATTERN")
					       (value . "[jJ]"))))
				    ((type . "BLANK")))))))
 (identifier (type . "PATTERN")
	     (value . "[_\\p{XID_Start}][_\\p{XID_Continue}]*"))
 (keyword_identifier (type . "PREC")
		     (value . -3)
		     (content (type . "ALIAS")
			      (content (type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "print"))
						((type . "STRING")
						 (value . "exec"))
						((type . "STRING")
						 (value . "async"))
						((type . "STRING")
						 (value . "await"))))
			      (named . t)
			      (value . identifier)))
 (true (type . "STRING") (value . "True"))
 (false (type . "STRING") (value . "False"))
 (none (type . "STRING") (value . "None"))
 (await (type . "PREC")
	(value . 18)
	(content (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "await"))
			  ((type . "SYMBOL")
			   (name . expression)))))
 (comment (type . "TOKEN")
	  (content (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "#"))
			    ((type . "PATTERN")
			     (value . ".*")))))
 (positional_separator (type . "STRING") (value . "/"))
 (keyword_separator (type . "STRING") (value . "*")))


 tree-edit--identifier-regex
 nil

 tree-edit--supertypes
 '
((module module)
 (_statement _statement)
 (_simple_statements _simple_statements)
 (_simple_statement _simple_statement)
 (import_statement import_statement _simple_statement)
 (import_prefix import_prefix)
 (relative_import relative_import)
 (future_import_statement future_import_statement _simple_statement)
 (import_from_statement import_from_statement _simple_statement)
 (_import_list _import_list)
 (aliased_import aliased_import _import_list)
 (wildcard_import wildcard_import)
 (print_statement print_statement _simple_statement)
 (chevron chevron)
 (assert_statement assert_statement _simple_statement)
 (comma_statement comma_statement _simple_statement)
 (named_expression named_expression
		   expression
		   _simple_statement
		   _expressions
		   _with_item
		   _expression_within_for_in_clause
		   _right_hand_side
		   _collection_elements)
 (_named_expresssion_lhs _named_expresssion_lhs)
 (return_statement return_statement _simple_statement)
 (delete_statement delete_statement _simple_statement)
 (_expressions _expressions)
 (raise_statement raise_statement _simple_statement)
 (pass_statement pass_statement _simple_statement)
 (break_statement break_statement _simple_statement)
 (continue_statement continue_statement _simple_statement)
 (_compound_statement _compound_statement)
 (if_statement if_statement _statement _compound_statement)
 (elif_clause elif_clause)
 (else_clause else_clause)
 (match_statement match_statement _statement _compound_statement)
 (case_clause case_clause)
 (for_statement for_statement _statement _compound_statement)
 (while_statement while_statement _statement _compound_statement)
 (try_statement try_statement _statement _compound_statement)
 (except_clause except_clause)
 (finally_clause finally_clause)
 (with_statement with_statement _statement _compound_statement)
 (_with_item _with_item)
 (function_definition function_definition _statement _compound_statement)
 (parameters parameters)
 (lambda_parameters lambda_parameters)
 (list_splat list_splat _collection_elements)
 (dictionary_splat dictionary_splat)
 (global_statement global_statement _simple_statement)
 (nonlocal_statement nonlocal_statement _simple_statement)
 (exec_statement exec_statement _simple_statement)
 (class_definition class_definition _statement _compound_statement)
 (parenthesized_list_splat parenthesized_list_splat _collection_elements)
 (argument_list argument_list)
 (decorated_definition decorated_definition _statement _compound_statement)
 (decorator decorator)
 (_suite _suite)
 (block block _suite)
 (expression_list expression_list _expressions _right_hand_side)
 (_dotted_name _dotted_name)
 (_parameters _parameters)
 (_patterns _patterns)
 (parameter parameter _parameters)
 (pattern pattern _patterns _left_hand_side)
 (tuple_pattern tuple_pattern
		parameter
		_parameters
		pattern
		_patterns
		_left_hand_side)
 (list_pattern list_pattern pattern _patterns _left_hand_side)
 (default_parameter default_parameter parameter _parameters)
 (list_splat_pattern list_splat_pattern
		     parameter
		     _parameters
		     pattern
		     _patterns
		     _left_hand_side)
 (dictionary_splat_pattern dictionary_splat_pattern parameter _parameters)
 (as_pattern as_pattern
	     expression
	     _simple_statement
	     _expressions
	     _with_item
	     _expression_within_for_in_clause
	     _right_hand_side
	     _collection_elements)
 (_expression_within_for_in_clause _expression_within_for_in_clause)
 (expression expression
	     _simple_statement
	     _expressions
	     _with_item
	     _expression_within_for_in_clause
	     _right_hand_side
	     _collection_elements)
 (primary_expression primary_expression
		     expression
		     _simple_statement
		     _expressions
		     _with_item
		     _expression_within_for_in_clause
		     _right_hand_side
		     _collection_elements)
 (not_operator not_operator
	       expression
	       _simple_statement
	       _expressions
	       _with_item
	       _expression_within_for_in_clause
	       _right_hand_side
	       _collection_elements)
 (boolean_operator boolean_operator
		   expression
		   _simple_statement
		   _expressions
		   _with_item
		   _expression_within_for_in_clause
		   _right_hand_side
		   _collection_elements)
 (binary_operator binary_operator
		  primary_expression
		  expression
		  _simple_statement
		  _expressions
		  _with_item
		  _expression_within_for_in_clause
		  _right_hand_side
		  _collection_elements)
 (unary_operator unary_operator
		 primary_expression
		 expression
		 _simple_statement
		 _expressions
		 _with_item
		 _expression_within_for_in_clause
		 _right_hand_side
		 _collection_elements)
 (comparison_operator comparison_operator
		      expression
		      _simple_statement
		      _expressions
		      _with_item
		      _expression_within_for_in_clause
		      _right_hand_side
		      _collection_elements)
 (lambda lambda
   _expression_within_for_in_clause
   expression
   _simple_statement
   _expressions
   _with_item
   _right_hand_side
   _collection_elements)
 (lambda_within_for_in_clause lambda_within_for_in_clause)
 (assignment assignment _simple_statement _right_hand_side)
 (augmented_assignment augmented_assignment
		       _simple_statement
		       _right_hand_side)
 (_left_hand_side _left_hand_side)
 (pattern_list pattern_list _left_hand_side)
 (_right_hand_side _right_hand_side)
 (yield yield _simple_statement _right_hand_side _collection_elements)
 (attribute attribute
	    pattern
	    _patterns
	    _left_hand_side
	    primary_expression
	    expression
	    _simple_statement
	    _expressions
	    _with_item
	    _expression_within_for_in_clause
	    _right_hand_side
	    _collection_elements)
 (subscript subscript
	    pattern
	    _patterns
	    _left_hand_side
	    primary_expression
	    expression
	    _simple_statement
	    _expressions
	    _with_item
	    _expression_within_for_in_clause
	    _right_hand_side
	    _collection_elements)
 (slice slice)
 (ellipsis ellipsis
	   primary_expression
	   expression
	   _simple_statement
	   _expressions
	   _with_item
	   _expression_within_for_in_clause
	   _right_hand_side
	   _collection_elements)
 (call call
       primary_expression
       expression
       _simple_statement
       _expressions
       _with_item
       _expression_within_for_in_clause
       _right_hand_side
       _collection_elements)
 (typed_parameter typed_parameter parameter _parameters)
 (keyword_argument keyword_argument)
 (list list
       primary_expression
       expression
       _simple_statement
       _expressions
       _with_item
       _expression_within_for_in_clause
       _right_hand_side
       _collection_elements)
 (set set
      primary_expression
      expression
      _simple_statement
      _expressions
      _with_item
      _expression_within_for_in_clause
      _right_hand_side
      _collection_elements)
 (tuple tuple
	primary_expression
	expression
	_simple_statement
	_expressions
	_with_item
	_expression_within_for_in_clause
	_right_hand_side
	_collection_elements)
 (dictionary dictionary
	     primary_expression
	     expression
	     _simple_statement
	     _expressions
	     _with_item
	     _expression_within_for_in_clause
	     _right_hand_side
	     _collection_elements)
 (pair pair)
 (list_comprehension list_comprehension
		     primary_expression
		     expression
		     _simple_statement
		     _expressions
		     _with_item
		     _expression_within_for_in_clause
		     _right_hand_side
		     _collection_elements)
 (dictionary_comprehension dictionary_comprehension
			   primary_expression
			   expression
			   _simple_statement
			   _expressions
			   _with_item
			   _expression_within_for_in_clause
			   _right_hand_side
			   _collection_elements)
 (set_comprehension set_comprehension
		    primary_expression
		    expression
		    _simple_statement
		    _expressions
		    _with_item
		    _expression_within_for_in_clause
		    _right_hand_side
		    _collection_elements)
 (generator_expression generator_expression
		       primary_expression
		       expression
		       _simple_statement
		       _expressions
		       _with_item
		       _expression_within_for_in_clause
		       _right_hand_side
		       _collection_elements)
 (_comprehension_clauses _comprehension_clauses)
 (parenthesized_expression parenthesized_expression
			   primary_expression
			   expression
			   _simple_statement
			   _expressions
			   _with_item
			   _expression_within_for_in_clause
			   _right_hand_side
			   _collection_elements)
 (_collection_elements _collection_elements)
 (for_in_clause for_in_clause _comprehension_clauses)
 (conditional_expression conditional_expression
			 expression
			 _simple_statement
			 _expressions
			 _with_item
			 _expression_within_for_in_clause
			 _right_hand_side
			 _collection_elements)
 (concatenated_string concatenated_string
		      primary_expression
		      expression
		      _simple_statement
		      _expressions
		      _with_item
		      _expression_within_for_in_clause
		      _right_hand_side
		      _collection_elements)
 (string string
	 primary_expression
	 expression
	 _simple_statement
	 _expressions
	 _with_item
	 _expression_within_for_in_clause
	 _right_hand_side
	 _collection_elements)
 (interpolation interpolation)
 (_escape_interpolation _escape_interpolation)
 (escape_sequence escape_sequence)
 (_not_escape_sequence _not_escape_sequence)
 (format_specifier format_specifier)
 (format_expression format_expression)
 (type_conversion type_conversion)
 (integer integer
	  primary_expression
	  expression
	  _simple_statement
	  _expressions
	  _with_item
	  _expression_within_for_in_clause
	  _right_hand_side
	  _collection_elements)
 (float float
	primary_expression
	expression
	_simple_statement
	_expressions
	_with_item
	_expression_within_for_in_clause
	_right_hand_side
	_collection_elements)
 (identifier identifier
	     _import_list
	     _named_expresssion_lhs
	     _dotted_name
	     parameter
	     _parameters
	     pattern
	     _patterns
	     _left_hand_side
	     primary_expression
	     expression
	     _simple_statement
	     _expressions
	     _with_item
	     _expression_within_for_in_clause
	     _right_hand_side
	     _collection_elements)
 (keyword_identifier keyword_identifier
		     pattern
		     _patterns
		     _left_hand_side
		     primary_expression
		     expression
		     _simple_statement
		     _expressions
		     _with_item
		     _expression_within_for_in_clause
		     _right_hand_side
		     _collection_elements)
 (true true
       primary_expression
       expression
       _simple_statement
       _expressions
       _with_item
       _expression_within_for_in_clause
       _right_hand_side
       _collection_elements)
 (false false
	primary_expression
	expression
	_simple_statement
	_expressions
	_with_item
	_expression_within_for_in_clause
	_right_hand_side
	_collection_elements)
 (none none
       primary_expression
       expression
       _simple_statement
       _expressions
       _with_item
       _expression_within_for_in_clause
       _right_hand_side
       _collection_elements)
 (await await
	expression
	_simple_statement
	_expressions
	_with_item
	_expression_within_for_in_clause
	_right_hand_side
	_collection_elements)
 (comment comment)
 (positional_separator positional_separator parameter _parameters)
 (keyword_separator keyword_separator parameter _parameters))


 tree-edit--subtypes
 '
((keyword_separator keyword_separator)
 (positional_separator positional_separator)
 (comment comment)
 (await await)
 (none none)
 (false false)
 (true true)
 (keyword_identifier keyword_identifier)
 (identifier identifier)
 (float float)
 (integer integer)
 (type_conversion type_conversion)
 (format_expression format_expression)
 (format_specifier format_specifier)
 (_not_escape_sequence _not_escape_sequence)
 (escape_sequence escape_sequence)
 (_escape_interpolation _escape_interpolation)
 (interpolation interpolation)
 (string string)
 (concatenated_string concatenated_string)
 (conditional_expression conditional_expression)
 (for_in_clause for_in_clause)
 (parenthesized_expression parenthesized_expression)
 (_comprehension_clauses for_in_clause _comprehension_clauses)
 (generator_expression generator_expression)
 (set_comprehension set_comprehension)
 (dictionary_comprehension dictionary_comprehension)
 (list_comprehension list_comprehension)
 (pair pair)
 (dictionary dictionary)
 (tuple tuple)
 (set set)
 (list list)
 (keyword_argument keyword_argument)
 (typed_parameter typed_parameter)
 (call call)
 (ellipsis ellipsis)
 (slice slice)
 (subscript subscript)
 (attribute attribute)
 (yield yield)
 (pattern_list pattern_list)
 (augmented_assignment augmented_assignment)
 (assignment assignment)
 (lambda_within_for_in_clause lambda_within_for_in_clause)
 (lambda lambda)
 (comparison_operator comparison_operator)
 (unary_operator unary_operator)
 (binary_operator binary_operator)
 (boolean_operator boolean_operator)
 (not_operator not_operator)
 (primary_expression none
		     false
		     true
		     keyword_identifier
		     identifier
		     float
		     integer
		     string
		     concatenated_string
		     parenthesized_expression
		     generator_expression
		     set_comprehension
		     dictionary_comprehension
		     list_comprehension
		     dictionary
		     tuple
		     set
		     list
		     call
		     ellipsis
		     subscript
		     attribute
		     unary_operator
		     binary_operator
		     primary_expression)
 (as_pattern as_pattern)
 (dictionary_splat_pattern dictionary_splat_pattern)
 (list_splat_pattern list_splat_pattern)
 (default_parameter default_parameter)
 (list_pattern list_pattern)
 (tuple_pattern tuple_pattern)
 (_left_hand_side keyword_identifier
		  identifier
		  subscript
		  attribute
		  pattern_list
		  _left_hand_side
		  list_splat_pattern
		  list_pattern
		  tuple_pattern
		  pattern)
 (pattern keyword_identifier
	  identifier
	  subscript
	  attribute
	  list_splat_pattern
	  list_pattern
	  tuple_pattern
	  pattern)
 (parameter keyword_separator
	    positional_separator
	    identifier
	    typed_parameter
	    dictionary_splat_pattern
	    list_splat_pattern
	    default_parameter
	    tuple_pattern
	    parameter)
 (_patterns keyword_identifier
	    identifier
	    subscript
	    attribute
	    list_splat_pattern
	    list_pattern
	    tuple_pattern
	    pattern
	    _patterns)
 (_parameters keyword_separator
	      positional_separator
	      identifier
	      typed_parameter
	      dictionary_splat_pattern
	      list_splat_pattern
	      default_parameter
	      tuple_pattern
	      parameter
	      _parameters)
 (_dotted_name identifier _dotted_name)
 (expression_list expression_list)
 (block block)
 (_suite block _suite)
 (decorator decorator)
 (decorated_definition decorated_definition)
 (argument_list argument_list)
 (parenthesized_list_splat parenthesized_list_splat)
 (class_definition class_definition)
 (exec_statement exec_statement)
 (nonlocal_statement nonlocal_statement)
 (global_statement global_statement)
 (dictionary_splat dictionary_splat)
 (list_splat list_splat)
 (lambda_parameters lambda_parameters)
 (parameters parameters)
 (function_definition function_definition)
 (with_statement with_statement)
 (finally_clause finally_clause)
 (except_clause except_clause)
 (try_statement try_statement)
 (while_statement while_statement)
 (for_statement for_statement)
 (case_clause case_clause)
 (match_statement match_statement)
 (else_clause else_clause)
 (elif_clause elif_clause)
 (if_statement if_statement)
 (_compound_statement decorated_definition
		      class_definition
		      function_definition
		      with_statement
		      try_statement
		      while_statement
		      for_statement
		      match_statement
		      if_statement
		      _compound_statement)
 (continue_statement continue_statement)
 (break_statement break_statement)
 (pass_statement pass_statement)
 (raise_statement raise_statement)
 (delete_statement delete_statement)
 (return_statement return_statement)
 (_named_expresssion_lhs identifier _named_expresssion_lhs)
 (_collection_elements await
		       none
		       false
		       true
		       keyword_identifier
		       identifier
		       float
		       integer
		       string
		       concatenated_string
		       conditional_expression
		       _collection_elements
		       parenthesized_expression
		       generator_expression
		       set_comprehension
		       dictionary_comprehension
		       list_comprehension
		       dictionary
		       tuple
		       set
		       list
		       call
		       ellipsis
		       subscript
		       attribute
		       yield
		       lambda
		       comparison_operator
		       unary_operator
		       binary_operator
		       boolean_operator
		       not_operator
		       primary_expression
		       expression
		       as_pattern
		       parenthesized_list_splat
		       list_splat
		       named_expression)
 (_right_hand_side await
		   none
		   false
		   true
		   keyword_identifier
		   identifier
		   float
		   integer
		   string
		   concatenated_string
		   conditional_expression
		   parenthesized_expression
		   generator_expression
		   set_comprehension
		   dictionary_comprehension
		   list_comprehension
		   dictionary
		   tuple
		   set
		   list
		   call
		   ellipsis
		   subscript
		   attribute
		   yield
		   _right_hand_side
		   augmented_assignment
		   assignment
		   lambda
		   comparison_operator
		   unary_operator
		   binary_operator
		   boolean_operator
		   not_operator
		   primary_expression
		   expression
		   as_pattern
		   expression_list
		   named_expression)
 (_expression_within_for_in_clause await
				   none
				   false
				   true
				   keyword_identifier
				   identifier
				   float
				   integer
				   string
				   concatenated_string
				   conditional_expression
				   parenthesized_expression
				   generator_expression
				   set_comprehension
				   dictionary_comprehension
				   list_comprehension
				   dictionary
				   tuple
				   set
				   list
				   call
				   ellipsis
				   subscript
				   attribute
				   lambda
				   comparison_operator
				   unary_operator
				   binary_operator
				   boolean_operator
				   not_operator
				   primary_expression
				   expression
				   _expression_within_for_in_clause
				   as_pattern
				   named_expression)
 (_with_item await
	     none
	     false
	     true
	     keyword_identifier
	     identifier
	     float
	     integer
	     string
	     concatenated_string
	     conditional_expression
	     parenthesized_expression
	     generator_expression
	     set_comprehension
	     dictionary_comprehension
	     list_comprehension
	     dictionary
	     tuple
	     set
	     list
	     call
	     ellipsis
	     subscript
	     attribute
	     lambda
	     comparison_operator
	     unary_operator
	     binary_operator
	     boolean_operator
	     not_operator
	     primary_expression
	     expression
	     as_pattern
	     _with_item
	     named_expression)
 (_expressions await
	       none
	       false
	       true
	       keyword_identifier
	       identifier
	       float
	       integer
	       string
	       concatenated_string
	       conditional_expression
	       parenthesized_expression
	       generator_expression
	       set_comprehension
	       dictionary_comprehension
	       list_comprehension
	       dictionary
	       tuple
	       set
	       list
	       call
	       ellipsis
	       subscript
	       attribute
	       lambda
	       comparison_operator
	       unary_operator
	       binary_operator
	       boolean_operator
	       not_operator
	       primary_expression
	       expression
	       as_pattern
	       expression_list
	       _expressions
	       named_expression)
 (expression await
	     none
	     false
	     true
	     keyword_identifier
	     identifier
	     float
	     integer
	     string
	     concatenated_string
	     conditional_expression
	     parenthesized_expression
	     generator_expression
	     set_comprehension
	     dictionary_comprehension
	     list_comprehension
	     dictionary
	     tuple
	     set
	     list
	     call
	     ellipsis
	     subscript
	     attribute
	     lambda
	     comparison_operator
	     unary_operator
	     binary_operator
	     boolean_operator
	     not_operator
	     primary_expression
	     expression
	     as_pattern
	     named_expression)
 (named_expression named_expression)
 (comma_statement comma_statement)
 (assert_statement assert_statement)
 (chevron chevron)
 (print_statement print_statement)
 (wildcard_import wildcard_import)
 (aliased_import aliased_import)
 (_import_list identifier aliased_import _import_list)
 (import_from_statement import_from_statement)
 (future_import_statement future_import_statement)
 (relative_import relative_import)
 (import_prefix import_prefix)
 (import_statement import_statement)
 (_simple_statement await
		    none
		    false
		    true
		    keyword_identifier
		    identifier
		    float
		    integer
		    string
		    concatenated_string
		    conditional_expression
		    parenthesized_expression
		    generator_expression
		    set_comprehension
		    dictionary_comprehension
		    list_comprehension
		    dictionary
		    tuple
		    set
		    list
		    call
		    ellipsis
		    subscript
		    attribute
		    yield
		    augmented_assignment
		    assignment
		    lambda
		    comparison_operator
		    unary_operator
		    binary_operator
		    boolean_operator
		    not_operator
		    primary_expression
		    expression
		    as_pattern
		    exec_statement
		    nonlocal_statement
		    global_statement
		    continue_statement
		    break_statement
		    pass_statement
		    raise_statement
		    delete_statement
		    return_statement
		    named_expression
		    comma_statement
		    assert_statement
		    print_statement
		    import_from_statement
		    future_import_statement
		    import_statement
		    _simple_statement)
 (_simple_statements _simple_statements)
 (_statement decorated_definition
	     class_definition
	     function_definition
	     with_statement
	     try_statement
	     while_statement
	     for_statement
	     match_statement
	     if_statement
	     _statement)
 (module module))


 tree-edit--alias-map
 '
((module)
 (_statement)
 (_simple_statements)
 (_simple_statement)
 (import_statement)
 (import_prefix)
 (relative_import)
 (future_import_statement)
 (import_from_statement)
 (_import_list)
 (aliased_import)
 (wildcard_import)
 (print_statement)
 (chevron)
 (assert_statement)
 (comma_statement)
 (named_expression)
 (_named_expresssion_lhs)
 (return_statement)
 (delete_statement)
 (_expressions)
 (raise_statement)
 (pass_statement)
 (break_statement)
 (continue_statement)
 (_compound_statement)
 (if_statement (_newline . block))
 (elif_clause (_newline . block))
 (else_clause (_newline . block))
 (match_statement)
 (case_clause (_newline . block))
 (for_statement (_newline . block))
 (while_statement (_newline . block))
 (try_statement (_newline . block))
 (except_clause (_newline . block))
 (finally_clause (_newline . block))
 (with_statement (_newline . block))
 (_with_item)
 (function_definition (_newline . block))
 (parameters)
 (lambda_parameters)
 (list_splat)
 (dictionary_splat)
 (global_statement)
 (nonlocal_statement)
 (exec_statement)
 (class_definition (_newline . block))
 (parenthesized_list_splat (parenthesized_list_splat . parenthesized_expression))
 (argument_list (parenthesized_list_splat . parenthesized_expression)
		(parenthesized_list_splat . parenthesized_expression))
 (decorated_definition)
 (decorator)
 (_suite (_newline . block))
 (block)
 (expression_list)
 (_dotted_name)
 (_parameters)
 (_patterns)
 (parameter)
 (pattern)
 (tuple_pattern)
 (list_pattern)
 (default_parameter)
 (list_splat_pattern)
 (dictionary_splat_pattern)
 (as_pattern (expression . as_pattern_target))
 (_expression_within_for_in_clause (lambda_within_for_in_clause . lambda))
 (expression)
 (primary_expression)
 (not_operator)
 (boolean_operator)
 (binary_operator)
 (unary_operator)
 (comparison_operator)
 (lambda)
 (lambda_within_for_in_clause (lambda_within_for_in_clause . lambda))
 (assignment)
 (augmented_assignment)
 (_left_hand_side)
 (pattern_list)
 (_right_hand_side)
 (yield)
 (attribute)
 (subscript)
 (slice)
 (ellipsis)
 (call)
 (typed_parameter)
 (keyword_argument)
 (list)
 (set)
 (tuple)
 (dictionary)
 (pair)
 (list_comprehension)
 (dictionary_comprehension)
 (set_comprehension)
 (generator_expression)
 (_comprehension_clauses)
 (parenthesized_expression)
 (_collection_elements)
 (for_in_clause (lambda_within_for_in_clause . lambda)
		(lambda_within_for_in_clause . lambda))
 (conditional_expression)
 (concatenated_string)
 (string (_string_start . \") (_string_end . \"))
 (interpolation)
 (_escape_interpolation)
 (escape_sequence)
 (_not_escape_sequence)
 (format_specifier)
 (format_expression)
 (type_conversion)
 (integer)
 (float)
 (identifier)
 (keyword_identifier)
 (true)
 (false)
 (none)
 (await)
 (comment)
 (positional_separator)
 (keyword_separator))


 tree-edit--containing-types
 '
((module expression
	 future_import_statement
	 import_statement
	 import_from_statement
	 print_statement
	 assert_statement
	 comma_statement
	 return_statement
	 delete_statement
	 raise_statement
	 pass_statement
	 break_statement
	 continue_statement
	 global_statement
	 nonlocal_statement
	 assignment
	 augmented_assignment
	 yield
	 exec_statement
	 expression
	 future_import_statement
	 import_statement
	 import_from_statement
	 print_statement
	 assert_statement
	 comma_statement
	 return_statement
	 delete_statement
	 raise_statement
	 pass_statement
	 break_statement
	 continue_statement
	 global_statement
	 nonlocal_statement
	 assignment
	 augmented_assignment
	 yield
	 exec_statement
	 _newline
	 if_statement
	 for_statement
	 while_statement
	 try_statement
	 with_statement
	 function_definition
	 class_definition
	 decorated_definition
	 match_statement)
 (_statement expression
	     future_import_statement
	     import_statement
	     import_from_statement
	     print_statement
	     assert_statement
	     comma_statement
	     return_statement
	     delete_statement
	     raise_statement
	     pass_statement
	     break_statement
	     continue_statement
	     global_statement
	     nonlocal_statement
	     assignment
	     augmented_assignment
	     yield
	     exec_statement
	     expression
	     future_import_statement
	     import_statement
	     import_from_statement
	     print_statement
	     assert_statement
	     comma_statement
	     return_statement
	     delete_statement
	     raise_statement
	     pass_statement
	     break_statement
	     continue_statement
	     global_statement
	     nonlocal_statement
	     assignment
	     augmented_assignment
	     yield
	     exec_statement
	     _newline
	     if_statement
	     for_statement
	     while_statement
	     try_statement
	     with_statement
	     function_definition
	     class_definition
	     decorated_definition
	     match_statement)
 (_simple_statements expression
		     future_import_statement
		     import_statement
		     import_from_statement
		     print_statement
		     assert_statement
		     comma_statement
		     return_statement
		     delete_statement
		     raise_statement
		     pass_statement
		     break_statement
		     continue_statement
		     global_statement
		     nonlocal_statement
		     assignment
		     augmented_assignment
		     yield
		     exec_statement
		     expression
		     future_import_statement
		     import_statement
		     import_from_statement
		     print_statement
		     assert_statement
		     comma_statement
		     return_statement
		     delete_statement
		     raise_statement
		     pass_statement
		     break_statement
		     continue_statement
		     global_statement
		     nonlocal_statement
		     assignment
		     augmented_assignment
		     yield
		     exec_statement
		     _newline)
 (_simple_statement expression
		    future_import_statement
		    import_statement
		    import_from_statement
		    print_statement
		    assert_statement
		    comma_statement
		    return_statement
		    delete_statement
		    raise_statement
		    pass_statement
		    break_statement
		    continue_statement
		    global_statement
		    nonlocal_statement
		    assignment
		    augmented_assignment
		    yield
		    exec_statement)
 (import_statement identifier
		   identifier
		   aliased_import
		   identifier
		   identifier
		   aliased_import)
 (import_prefix)
 (relative_import import_prefix identifier identifier)
 (future_import_statement identifier
			  identifier
			  aliased_import
			  identifier
			  identifier
			  aliased_import
			  identifier
			  identifier
			  aliased_import
			  identifier
			  identifier
			  aliased_import)
 (import_from_statement relative_import
			identifier
			identifier
			wildcard_import
			identifier
			identifier
			aliased_import
			identifier
			identifier
			aliased_import
			identifier
			identifier
			aliased_import
			identifier
			identifier
			aliased_import)
 (_import_list identifier
	       identifier
	       aliased_import
	       identifier
	       identifier
	       aliased_import)
 (aliased_import identifier identifier identifier)
 (wildcard_import)
 (print_statement chevron expression expression expression)
 (chevron expression)
 (assert_statement expression expression)
 (comma_statement expression expression expression)
 (named_expression identifier identifier expression)
 (_named_expresssion_lhs identifier identifier)
 (return_statement expression expression_list)
 (delete_statement expression expression_list)
 (_expressions expression expression_list)
 (raise_statement expression expression_list expression)
 (pass_statement)
 (break_statement)
 (continue_statement)
 (_compound_statement if_statement
		      for_statement
		      while_statement
		      try_statement
		      with_statement
		      function_definition
		      class_definition
		      decorated_definition
		      match_statement)
 (if_statement expression block _indent block block elif_clause else_clause)
 (elif_clause expression block _indent block block)
 (else_clause block _indent block block)
 (match_statement expression expression case_clause)
 (case_clause case_pattern case_pattern expression block _indent block block)
 (for_statement pattern
		pattern_list
		expression
		expression_list
		block
		_indent
		block
		block
		else_clause)
 (while_statement expression block _indent block block else_clause)
 (try_statement block
		_indent
		block
		block
		except_clause
		else_clause
		finally_clause
		finally_clause)
 (except_clause expression expression block _indent block block)
 (finally_clause block _indent block block)
 (with_statement expression
		 expression
		 expression
		 expression
		 block
		 _indent
		 block
		 block)
 (_with_item expression)
 (function_definition identifier
		      parameters
		      expression
		      block
		      _indent
		      block
		      block)
 (parameters parameter parameter)
 (lambda_parameters parameter parameter)
 (list_splat expression)
 (dictionary_splat expression)
 (global_statement identifier identifier)
 (nonlocal_statement identifier identifier)
 (exec_statement string expression expression)
 (class_definition identifier argument_list block _indent block block)
 (parenthesized_list_splat parenthesized_expression list_splat)
 (argument_list expression
		list_splat
		dictionary_splat
		parenthesized_expression
		keyword_argument
		expression
		list_splat
		dictionary_splat
		parenthesized_expression
		keyword_argument)
 (decorated_definition decorator class_definition function_definition)
 (decorator primary_expression _newline)
 (_suite block _indent block block)
 (block expression
	future_import_statement
	import_statement
	import_from_statement
	print_statement
	assert_statement
	comma_statement
	return_statement
	delete_statement
	raise_statement
	pass_statement
	break_statement
	continue_statement
	global_statement
	nonlocal_statement
	assignment
	augmented_assignment
	yield
	exec_statement
	expression
	future_import_statement
	import_statement
	import_from_statement
	print_statement
	assert_statement
	comma_statement
	return_statement
	delete_statement
	raise_statement
	pass_statement
	break_statement
	continue_statement
	global_statement
	nonlocal_statement
	assignment
	augmented_assignment
	yield
	exec_statement
	_newline
	if_statement
	for_statement
	while_statement
	try_statement
	with_statement
	function_definition
	class_definition
	decorated_definition
	match_statement
	_dedent)
 (expression_list expression expression)
 (_dotted_name identifier identifier)
 (_parameters parameter parameter)
 (_patterns pattern pattern)
 (parameter identifier
	    typed_parameter
	    default_parameter
	    list_splat_pattern
	    tuple_pattern
	    keyword_separator
	    positional_separator
	    dictionary_splat_pattern)
 (pattern identifier
	  identifier
	  keyword_identifier
	  subscript
	  attribute
	  list_splat_pattern
	  tuple_pattern
	  list_pattern)
 (tuple_pattern pattern pattern)
 (list_pattern pattern pattern)
 (default_parameter identifier typed_parameter expression)
 (list_splat_pattern identifier keyword_identifier subscript attribute)
 (dictionary_splat_pattern identifier keyword_identifier subscript attribute)
 (as_pattern expression as_pattern_target)
 (_expression_within_for_in_clause expression lambda)
 (expression comparison_operator
	     not_operator
	     boolean_operator
	     await
	     lambda
	     primary_expression
	     conditional_expression
	     named_expression
	     as_pattern)
 (primary_expression binary_operator
		     identifier
		     identifier
		     keyword_identifier
		     string
		     concatenated_string
		     integer
		     float
		     true
		     false
		     none
		     unary_operator
		     attribute
		     subscript
		     call
		     list
		     list_comprehension
		     dictionary
		     dictionary_comprehension
		     set
		     set_comprehension
		     tuple
		     parenthesized_expression
		     generator_expression
		     ellipsis)
 (not_operator expression)
 (boolean_operator expression expression expression expression)
 (binary_operator primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression
		  primary_expression)
 (unary_operator primary_expression)
 (comparison_operator primary_expression primary_expression)
 (lambda lambda_parameters expression)
 (lambda_within_for_in_clause lambda_parameters expression lambda)
 (assignment pattern
	     pattern_list
	     expression
	     expression_list
	     assignment
	     augmented_assignment
	     yield
	     expression
	     expression
	     expression
	     expression_list
	     assignment
	     augmented_assignment
	     yield)
 (augmented_assignment pattern
		       pattern_list
		       expression
		       expression_list
		       assignment
		       augmented_assignment
		       yield)
 (_left_hand_side pattern pattern_list)
 (pattern_list pattern pattern)
 (_right_hand_side expression
		   expression_list
		   assignment
		   augmented_assignment
		   yield)
 (yield expression expression expression_list)
 (attribute primary_expression identifier)
 (subscript primary_expression expression slice expression slice)
 (slice expression expression expression)
 (ellipsis)
 (call primary_expression generator_expression argument_list)
 (typed_parameter identifier
		  list_splat_pattern
		  dictionary_splat_pattern
		  expression)
 (keyword_argument identifier keyword_identifier identifier expression)
 (list expression
       yield
       list_splat
       parenthesized_list_splat
       expression
       yield
       list_splat
       parenthesized_list_splat)
 (set expression
      yield
      list_splat
      parenthesized_list_splat
      expression
      yield
      list_splat
      parenthesized_list_splat)
 (tuple expression
	yield
	list_splat
	parenthesized_list_splat
	expression
	yield
	list_splat
	parenthesized_list_splat)
 (dictionary pair dictionary_splat pair dictionary_splat)
 (pair expression expression)
 (list_comprehension expression for_in_clause for_in_clause expression)
 (dictionary_comprehension pair for_in_clause for_in_clause expression)
 (set_comprehension expression for_in_clause for_in_clause expression)
 (generator_expression expression for_in_clause for_in_clause expression)
 (_comprehension_clauses for_in_clause for_in_clause expression)
 (parenthesized_expression expression yield)
 (_collection_elements expression
		       yield
		       list_splat
		       parenthesized_list_splat
		       expression
		       yield
		       list_splat
		       parenthesized_list_splat)
 (for_in_clause pattern pattern_list expression lambda expression lambda)
 (conditional_expression expression expression expression)
 (concatenated_string string string)
 (string \" interpolation escape_sequence _string_content \")
 (interpolation expression type_conversion format_specifier)
 (_escape_interpolation)
 (escape_sequence)
 (_not_escape_sequence)
 (format_specifier format_expression)
 (format_expression expression)
 (type_conversion)
 (integer)
 (float)
 (identifier)
 (keyword_identifier identifier)
 (true)
 (false)
 (none)
 (await expression)
 (comment)
 (positional_separator)
 (keyword_separator))
)

(provide 'tree-edit-python-grammar)
;;; tree-edit-python-grammar.el ends here