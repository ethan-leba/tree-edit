#+HTML: <div align="center"><a href="https://melpa.org/#/evil-tree-edit"><img alt="MELPA" src="https://melpa.org/packages/evil-tree-edit-badge.svg"/></a></div>
#+HTML: <p align="center">âš  <b>Tree-edit is very much a work-in-progress.</b> Expect to run into bugs and breaking changes!</p>
#+HTML: <p align="center"><img width="835" src="assets/demo.gif"></p>

Every programming language has a formally defined structure, but most text
editors are completely ignorant to it. As a result, editing can oftentimes
devolve into a tedious exercise in character manipulation.

*Tree-edit provides [[#supported-languages][language-agnostic]] editing operations that map directly to
the structure of the language*, abstracting away the process of manually
entering syntax. Leveraging the [[https://github.com/tree-sitter/tree-sitter][tree-sitter]] parser, tree-edit always has access
to the precise state of the syntax tree -- and directly wields the grammars of
the languages under edit to power it's editing capabilities.

* Overview
The repository contains two co-existing packages (that will eventually be
split).

- [[file:doc/using-tree-edit.org][tree-edit]] :: The core library for structural editing. This library is
  intended to be used by other elispers who would like to implement their own
  structural editing or refactoring commands.
- [[file:doc/evil-tree-edit.org][evil-tree-edit]] :: An evil state for structural editing with preconfigured
  bindings and visualization, as seen in the GIF.

To get an overview of tree-edit's capabilities, check out the [[https://emacsconf.org/2021/talks/structural/][EmacsConf talk]]!

* How does it work?

#+HTML: <p align="center"><img src="assets/diagram.png"></p>

Tree-edit relies heavily on the tree-sitter parser, leveraging the JSON
intermediate representation that tree-sitter outputs to have a full
understanding of what is valid for a given language with no language specific
efforts on tree-edit's part.

To learn more about how tree-edit works under the hood, see [[file:doc/implementation.org][this high-level
overview]] or check out this [[file:doc/parser-examples.org][org doc with executable code examples]] demonstrating
how the syntax generation works.

* Supported languages

| Status | Language       |
|--------+----------------|
| âœ…     | [[https://github.com/tree-edit/tree-sitter-python][Python]] ([[https://github.com/ethan-leba/tree-edit/issues/33][issue]]) |
| ðŸ”¨     | [[https://github.com/tree-edit/tree-sitter-c][C]] ([[https://github.com/ethan-leba/tree-edit/issues/54][issue]])      |
| ðŸ”¨     | [[https://github.com/tree-edit/tree-sitter-java][Java]] ([[https://github.com/ethan-leba/tree-edit/issues/34][issue]])   |

See links for grammar repository and issue tracker respectively.

| âœ… | Supported               |
| ðŸ”¨ | Under development       |

Tree-edit is designed to be as language-agnostic as possible. Currently the list
of supported languages is not very impressive, but /in theory/ it should be as
simple as running a script to preprocess a grammar and adding a configuration
file for the language. In practice the grammars usually also need modifications
in order to make the grammar ergonomic for structural modification.

See [[https://github.com/ethan-leba/tree-edit/blob/main/doc/using-tree-edit.org#adding-new-languages-to-tree-edit][here]] to learn the process for adding a new language.

* Custom grammars

Tree-edit uses forked version of tree-sitter grammars to power it's editing. See
here for how install the forked grammars.

The tree-sitter API and grammars were not designed with the structural editing
usecase in mind, so most grammars are structured in a way that makes navigation
and editing in tree-edit awkward or impossible without complex and fragile
hackarounds. For more context, see this GH issue:
https://github.com/tree-sitter/tree-sitter/issues/1558

I hope that in the future more thought will be given to this usecase in terms of
the tree-sitter API and grammar design so that the forks will eventually become
necessary, but for now they're needed.

** Installing custom grammars

*** Straight/Doom (recommended)

We can use the [[https://github.com/radian-software/straight.el][straight]] package manager to manage the tree-sitter repo
repositories and automatically build the grammar whenever a new version is
available via the =:pre-build= hook. Here's an example straight recipe:

#+begin_src elisp
'(tree-edit-python
   :host github
   :repo "tree-edit/tree-sitter-python"
   :files ("*")
   :post-build
   (progn
     (require 'tree-edit-build)
     (tree-edit-compile-grammar 'rustic-mode)))
#+end_src

And the equivalent for Doom Emac's =package!= macro:

#+begin_src elisp
(package! tree-edit-python
    :recipe (:host github
             :repo "tree-edit/tree-sitter-python"
             :files ("*")
             :post-build
             (progn
               (require 'tree-edit-build)
               (tree-edit-compile-grammar 'python-mode))))
#+end_src

*** Manual

If you don't use straight or similar VC-based package managers, you can instead
manage the grammar repos directly:

1. =git clone= a grammar to somewhere
2. Add the following to your config:

#+begin_src elisp
(require 'tree-edit-build)
(tree-edit-compile-grammar "~/my-python-grammar" 'python-mode)
#+end_src

=tree-edit= stores a hash of the grammar so that it will only be rebuilt when
there are changes to =grammar.json=

3. Whenever an update is wanted, perform a =git pull= on the grammar repository

* Contributing

Contributions are very much welcome! In particular, adding language files would
be a great place to help. Otherwise, the issues are a good place to propose
features or find ones to implement.

In addition, reporting bugs and providing feedback on the overall design and UX
of the package is much appreciated! Providing a good UX for structural editing
is crucial and will become increasingly important to this package as more of the
fundamental shortcomings get ironed out.

The project is fairly complex and the documentation is still in progress, so
feel free to open a discussion if you're interested in helping out but you're
not sure where to start!

** Running tests

The tests can be run with the =./run-tests.sh= script. Note that due to the way
Cask works, the =store/= directory containing grammar hashes and grammar files
will be stored in the root of the =tree-edit= repository, while the actual
compiled grammars will exist inside of the =.cask/= directory. So make sure to
delete both of those directories if you need to clear your test environment.

* Related projects
- [[https://github.com/mickeynp/combobulate][combobulate]] :: Structural navigation and limited structural editing
- [[https://github.com/manateelazycat/grammatical-edit][grammatical-edit]] :: Smartparens-like using tree-sitter (?)
- [[https://github.com/meain/evil-textobj-tree-sitter][evil-textobj-tree-sitter]] :: Evil mode text objects using tree-sitter queries.
- [[https://github.com/abo-abo/lispy][lispy]] :: Lisp structural editing package -- big inspiration for tree-edit!
- [[https://github.com/Fuco1/smartparens][smartparens]] :: Multilingual package with structural editing limited to matching delimiters.
